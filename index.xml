<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yulong Niu</title><link>https://YulongNiu.github.io/</link><description>Recent content on Yulong Niu</description><generator>Hugo</generator><language>en-us</language><copyright>© Copyright notice</copyright><lastBuildDate>Tue, 11 Jan 2022 16:48:13 +0800</lastBuildDate><atom:link href="https://YulongNiu.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Spacemacs配置C/C++语言编程环境</title><link>https://YulongNiu.github.io/posts/2022-01-11-spacemacs-c-env/</link><pubDate>Tue, 11 Jan 2022 16:48:13 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2022-01-11-spacemacs-c-env/</guid><description>&lt;p>一份极简的Spacemacs的C/C++语言编程环境配置。&lt;/p>
&lt;h2 id="1-前奏">1. 前奏&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装&lt;a href="https://clangd.llvm.org/installation.html">clangd&lt;/a>、&lt;a href="https://github.com/rizsotto/Bear">Bear&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目目录下使用&lt;code>Bear&lt;/code>，之后在目录下会生成&lt;code>compile_commands.json&lt;/code>文件。LSP会自动搜索和使用该文件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ bear -- make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>另一种生成&lt;code>compile_commands.json&lt;/code>文件的方法是使用&lt;a href="https://github.com/nickdiego/compiledb">compiledb&lt;/a>，使用&lt;code>pip install compiledb&lt;/code>安装。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ compiledb make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-配置">2. 配置&lt;/h2>
&lt;ol>
&lt;li>配置&lt;a href="https://github.com/syl20bnr/spacemacs">Spacemacs&lt;/a>的&lt;code>~/.spacemacs&lt;/code>文件。基本思路是添加&lt;a href="https://develop.spacemacs.org/layers/+tools/lsp/README.html">lsp layer&lt;/a>和&lt;a href="https://develop.spacemacs.org/layers/+lang/c-c++/README.html">c-c++ layer&lt;/a>。&lt;/li>
&lt;/ol>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&amp;#39;((lsp :variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lsp-lens-enable t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lsp-use-lsp-ui t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (c-c++ :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c-c++-backend &lt;span style="color:#a31515">&amp;#39;lsp-clangd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c-c++-lsp-enable-semantic-highlight &lt;span style="color:#a31515">&amp;#39;rainbow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c-c++-enable-clang-format-on-save t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c-c++-adopt-subprojects t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-conda配置gcc环境">3. conda配置gcc环境&lt;/h2>
&lt;h3 id="31-设定conda环境">3.1 设定conda环境&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$ conda config --add channels conda-forge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda config --set channel_priority strict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda create -n make_env cxx-compiler boost armadillo -c conda-forge
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="33-设定cplus_include_path">3.3 设定&lt;code>CPLUS_INCLUDE_PATH&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查看conda&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda env config vars list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 添加include path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda env config vars set CPLUS_INCLUDE_PATH=${CONDA_PREFIX}/include:${CPLUS_INCLUDE_PATH}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 恢复conda环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda env config vars set CPLUS_INCLUDE_PATH
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/30573481/how-to-write-a-makefile-with-separate-source-and-header-directories">极好的makefile操作指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2022年02月10日&lt;/p></description></item><item><title>gpg使用简要</title><link>https://YulongNiu.github.io/posts/2020-01-23-gpg/</link><pubDate>Thu, 23 Jan 2020 16:17:46 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2020-01-23-gpg/</guid><description>&lt;p>本文尝试摘要gpg的常用功能。&lt;/p>
&lt;h2 id="0-基本概念">0. 基本概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>secret key/sec：主密钥，非常重要。丢失密钥，无法解密；泄漏密钥，加密无效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>secret subkey/ssb：子密钥，在不同环境中使用。由主密钥签发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>public key/pub：主公钥，明文分发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>public subkey/sub：子公钥，与子密钥对应。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>S：Sign&lt;/p>
&lt;/li>
&lt;li>
&lt;p>C：Certify&lt;/p>
&lt;/li>
&lt;li>
&lt;p>E：Encrypt&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install gnupg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-基本操作">2. 基本操作&lt;/h2>
&lt;h3 id="21-生成">2.1 生成&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 生成主密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --full-gen-key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 根据提示设置：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## key size选择4096&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 生成子密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --edit-key MyID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 进入交互页面，输入：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## addKey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 之后，根据提示设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## save&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-查看">2.2 查看&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查看公钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --list-keys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## `--fingerprint`指纹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## `--keyid-format`长ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 0x后为长ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --list-key --fingerprint --keyid-format long
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查看私钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --list-secret-keys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -K
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-撤销">2.3 撤销&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg --generate-revocation -ao myRevokeFile MyID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="24-备份">2.4 备份&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 备份公钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## -a: armor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -ao MyPublickKeyFile --export MyID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 备份主密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## MyLongID后加!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -ao MySecretKeyFile --export-secret-key MyLongID!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 备份签名子密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -ao MySignSubkeyFile --export-secret-subkeys MyLongID!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 备份加密子密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg -ao MyEncryptSubkeyFile --export-secret-subkeys MyLongID!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="25-导入">2.5 导入&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 导入密钥或公钥&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --import MyKeyFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入后出现&lt;code>There is no assurance this key belongs to the named user&lt;/code>警告，需要手动信任。&lt;/p></description></item><item><title>About</title><link>https://YulongNiu.github.io/about/</link><pubDate>Mon, 02 Dec 2019 13:46:11 +0100</pubDate><guid>https://YulongNiu.github.io/about/</guid><description>&lt;p>个人博客，分享精彩生活。&lt;/p>
&lt;p>A personal blog for sharing my wonderful life.&lt;/p></description></item><item><title>使用Hugo搭建博客</title><link>https://YulongNiu.github.io/posts/2019-11-03-setup_hugo_blog/</link><pubDate>Sun, 03 Nov 2019 16:46:02 +0100</pubDate><guid>https://YulongNiu.github.io/posts/2019-11-03-setup_hugo_blog/</guid><description>&lt;p>从&lt;a href="http://octopress.org/">Octopress&lt;/a>迁移至Hugo，希望可以稳定地维持5年。&lt;/p>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装hogu&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 创建个人博客目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo new site HugoBlog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd HugoBlog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 选择主题&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd themes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/vividvilla/ezhil.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 启动hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 启动hugo并预览博文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hugo server -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-基本配置">2. 基本配置&lt;/h2>
&lt;h3 id="21-配置主页">2.1 配置主页&lt;/h3>
&lt;p>编辑模板&lt;code>HugoBlog/config.toml&lt;/code>。&lt;/p>
&lt;h3 id="22-配置博文header">2.2 配置博文header&lt;/h3>
&lt;p>编辑&lt;code>HugoBlog/archetypes/default.md&lt;/code>，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: {{ .Date }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description: &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>disqus: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draft: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>draft: true&lt;/code>为私密博文，&lt;code>draft: false&lt;/code>为公开博文。&lt;/p></description></item><item><title>小的改进能提升文章审稿速度</title><link>https://YulongNiu.github.io/posts/2019-05-04-small-changes-smooth-review/</link><pubDate>Sat, 04 May 2019 16:03:35 +0200</pubDate><guid>https://YulongNiu.github.io/posts/2019-05-04-small-changes-smooth-review/</guid><description>&lt;p>我最近看到Nature的一篇&lt;a href="https://www.nature.com/articles/d41586-019-01431-z">报道&lt;/a>，讲述一些小的改进能提升文章的审稿速度。内容包括了草稿排版、写作和图表等方面，简要摘录关键信息。尽管遵循这些建议不会增加或减少文章被接受的概率，但能更加清楚地向读者和审稿人展现自己文章的核心内容。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>草稿排版&lt;/p>
&lt;ul>
&lt;li>
&lt;p>宽行间距和大号字体。单列排版时，推荐使用1.5倍行距，每行12-15个单词。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连续行编号，方便审稿人指出问题所在位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>图和图例尽量靠近相关文字。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>写作&lt;/p>
&lt;ul>
&lt;li>
&lt;p>避免主观词汇。审稿人通常反感主观词汇，例如：unprecedented、 paradigm shift、 amazing、 dramatic、 interesting、 remarkable等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>减少使用缩写。当文中出现5次或以上时，再考虑使用缩写。但一些熟知的专业名词，例如DNA、RNA等要使用缩写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免使用无方向性词汇，influence。应该明确指出怎样影响（增加或减少），最好能有具体的数值表述。例如，改变×××倍提高了×××产量等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>避免在所有情况下都使用significant。因为signficant容易和统计检验混淆，应该使用具体数值描述影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文章起一个陈述性的题目。避免使用暗示性、假设性的题目，而应该具体描述文章的发现。注意不要夸大结果或者模糊描述。“通过避免使用主观词汇、仔细描述文章真实而非潜在暗示的发现，应该能找到一个可读性高、信息量大、有趣的题目，从而不会夸大文章的发现”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>摘要写法，Nature提供了一个&lt;a href="https://www.nature.com/documents/nature-summary-paragraph.pdf">模板&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/Nature_abstract_template.jpg" alt="Nature_abstract_template">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据和图标&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义不确定量（统计学）。在图例中描述error bar、盒箱图等不确定量的定义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;a href="https://www.nature.com/collections/qghhqm">统计检验&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>展示和提取潜在数据。例如使用散点图（小数据）、盒箱图/小提琴图（大数据）等、提交数据至数据库等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>合理上色。避免使用彩虹图、使用&lt;a href="http://colorbrewer2.org/#type=sequential&amp;amp;scheme=BuGn&amp;amp;n=3">ColorBrewer&lt;/a>等更加友好的配色方案。比如一种diverge配色方案（热图），中间数据使用白色、两边渐进黄蓝强对比色。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>简化图。去除3D、阴影或不必要的颜色等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>图例中添加小标题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.nature.com/articles/d41586-019-01431-z">How small changes to a paper can help to smooth the review process&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.nature.com/collections/qghhqm">Statistics for Biologists&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://academic.oup.com/qjmed/article/103/3/207/1589103">When I use a word … Declarative titles&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2019年05月04日&lt;/p></description></item><item><title>DESeq2包的对比组设计</title><link>https://YulongNiu.github.io/posts/2019-04-15-deseq2-design/</link><pubDate>Mon, 15 Apr 2019 14:58:58 +0200</pubDate><guid>https://YulongNiu.github.io/posts/2019-04-15-deseq2-design/</guid><description>&lt;h2 id="1-两两比对">1. 两两比对&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>DataFrame with 12 rows and 2 columns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> condition genotype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;factor&amp;gt; &amp;lt;factor&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample1 A I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample2 A I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample3 A I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample4 A II
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample5 A II
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>... ... ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample8 B I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample9 B I
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample10 B II
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample11 B II
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sample12 B II
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>组A &lt;em>vs.&lt;/em> 组B。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-R" data-lang="R">&lt;span style="display:flex;">&lt;span>dds &amp;lt;- makeExampleDESeqDataSet(n = 100, m = 12)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dds$genotype &amp;lt;- factor(rep(rep(c(&lt;span style="color:#a31515">&amp;#39;I&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;II&amp;#39;&lt;/span>), each=3), 2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## condition: A vs. B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>design(dds) &amp;lt;- ~ condition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ddres &amp;lt;- DESeq(dds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &amp;lt;- results(ddres, contrast = c(&lt;span style="color:#a31515">&amp;#39;condition&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;A&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## genotype I vs. II&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>design(dds) &amp;lt;- ~ genotype
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ddres &amp;lt;- DESeq(dds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &amp;lt;- results(ddres, contrast = c(&lt;span style="color:#a31515">&amp;#39;genotype&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;I&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;II&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## A vs. B at genotype II&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dds$group &amp;lt;- factor(paste0(dds$genotype, dds$condition))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>design(dds) &amp;lt;- ~ group
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ddres &amp;lt;- DESeq(dds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>results(ddres, contrast = c(&lt;span style="color:#a31515">&amp;#39;group&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;IIB&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;IIA&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-交叉项">2. 交叉项&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-R" data-lang="R">&lt;span style="display:flex;">&lt;span>dds &amp;lt;- makeExampleDESeqDataSet(n = 100, m = 12)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dds$genotype &amp;lt;- factor(rep(rep(c(&lt;span style="color:#a31515">&amp;#39;I&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;II&amp;#39;&lt;/span>), each=3), 2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>design(dds) &amp;lt;- ~ genotype + condition + genotype:condition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ddres &amp;lt;- DESeq(dds) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## A vs. B at genotype I&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &amp;lt;- results(ddres, contrast = c(&lt;span style="color:#a31515">&amp;#39;condition&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;A&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## A vs. B at genotype II&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &amp;lt;- results(ddres, list(c(&lt;span style="color:#a31515">&amp;#39;condition_B_vs_A&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;genotypeII.conditionB&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## condition effect *different* across genotypes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &amp;lt;- results(ddres, name = &lt;span style="color:#a31515">&amp;#39;genotypeII.conditionB&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，第二例子中的&lt;code>A vs. B at genotype II&lt;/code>与第一个的区别是，考虑了交叉项的影响。如果只是为了两两比对，可以考虑使用第一个例子的处理方法。&lt;/p></description></item><item><title>tidyverse使用集锦</title><link>https://YulongNiu.github.io/posts/2018-11-26-tidyverse/</link><pubDate>Mon, 26 Nov 2018 16:31:58 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2018-11-26-tidyverse/</guid><description>&lt;h2 id="1-使用dplyr包的好处">1. 使用&lt;!-- raw HTML omitted -->dplyr&lt;!-- raw HTML omitted -->包的好处&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>大多数时间在操作&lt;code>tbl_df&lt;/code>对象，而不是&lt;code>data.frame&lt;/code>（特别是含有&lt;code>factor&lt;/code>的&lt;code>data.frame&lt;/code>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与&lt;!-- raw HTML omitted -->magrittr&lt;!-- raw HTML omitted -->包的管道更好地结合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更丰富的列操作，例如&lt;code>mutate&lt;/code>、&lt;code>select&lt;/code>。&lt;code>group_by&lt;/code>会节省很多for循环。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2-列操作">2. 列操作&lt;/h2>
&lt;h3 id="21-基本函数">2.1 基本函数&lt;/h3>
&lt;ul>
&lt;li>&lt;code>filter()&lt;/code>：过滤列，需要输入一个逻辑向量。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>xor(x, y)：&lt;/code>x和y并集除去交集的部分。&lt;/p>
&lt;p>&lt;code>between(x, left, right)&lt;/code>：left &amp;lt;= x &amp;lt;= right。&lt;/p>
&lt;p>&lt;code>near(x, y)&lt;/code>：x和y在一定精度下相等，比&lt;code>==&lt;/code>安全）。直接使用列名操作，例如&lt;code>year == 2018&lt;/code>。多列操作相当于&lt;code>&amp;amp;&lt;/code>。&lt;/p>
&lt;p>&lt;code>filter()&lt;/code>受&lt;code>group&lt;/code>操作影响。&lt;/p>
&lt;p>返回一个空的表格，只保留列名，&lt;code>filter(x, FALSE)&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>&lt;code>arrange()&lt;/code>：列排序（默认升序）。&lt;/li>
&lt;/ul>
&lt;p>多列操作时，先排序第一个，再对第一个相等的排第二个。&lt;/p>
&lt;p>&lt;code>desc()&lt;/code>降序排列。&lt;code>.by_group = FALSE&lt;/code>控制是否需要按照group进行组内操作。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>select()&lt;/code>：选择列，重新组合新的&lt;code>tbl_df&lt;/code>。结合&lt;!-- raw HTML omitted -->tidyselect&lt;!-- raw HTML omitted -->包&lt;code>的starts_with()&lt;/code>前缀、&lt;code>end_with()&lt;/code>后缀、&lt;code>contains()&lt;/code>部分字符串、&lt;code>matches()&lt;/code>正则匹配、&lt;code>num_range&lt;/code>类似V01和x02之类、&lt;code>everything()&lt;/code>（剩余）所有的列、&lt;code>last_col(offset = n)&lt;/code>倒数第n+1列（默认n为0）。&lt;code>select(Col1 = col1)&lt;/code>更改col1列名为Col1，并只返回Col1列。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rename(Col1 = col1)&lt;/code>：返回全部列，但更改列名为Col1。不受&lt;code>group&lt;/code>操作影响。&lt;code>setNames(...)&lt;/code>不属于&lt;!-- raw HTML omitted -->dplyr&lt;!-- raw HTML omitted -->包，但能快速更改所有列命名。&lt;/p></description></item><item><title>R和Rcpp的性能监测</title><link>https://YulongNiu.github.io/posts/2018-10-03-profile-r-and-rcpp/</link><pubDate>Wed, 03 Oct 2018 19:38:37 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2018-10-03-profile-r-and-rcpp/</guid><description>&lt;h2 id="1-r性能检测">1. R性能检测&lt;/h2>
&lt;p>直接使用&lt;!-- raw HTML omitted -->profvis&lt;!-- raw HTML omitted -->包即可，例如&lt;a href="https://rstudio.github.io/profvis/">示例&lt;/a>。&lt;/p>
&lt;h2 id="2-linux系统rcpp性能检测">2. Linux系统Rcpp性能检测&lt;/h2>
&lt;h3 id="21-安装依赖软件">2.1 安装依赖软件&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install gperftools-devel google-perftools graphviz ghostscript kcachegrind
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-编译">2.2 编译&lt;/h3>
&lt;p>在包（包名称为&lt;code>Mypkg&lt;/code>）目录&lt;code>src&lt;/code>建立如下文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">#include&lt;/span> &lt;span style="color:#00f">&amp;lt;Rcpp.h&amp;gt;&lt;/span>&lt;span style="color:#00f">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">#include&lt;/span> &lt;span style="color:#00f">&amp;lt;gperftools/profiler.h&amp;gt;&lt;/span>&lt;span style="color:#00f">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">using&lt;/span> &lt;span style="color:#00f">namespace&lt;/span> Rcpp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// [[Rcpp::export]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>SEXP start_profiler(SEXP str) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ProfilerStart(as&amp;lt;&lt;span style="color:#00f">const&lt;/span> &lt;span style="color:#2b91af">char&lt;/span>*&amp;gt;(str));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> R_NilValue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// [[Rcpp::export]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>SEXP stop_profiler() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ProfilerStop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> R_NilValue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>包目录&lt;code>src&lt;/code>的Makevars文件中添加&lt;code>-lprofile&lt;/code>选项，例如&lt;code>PKG_LIBS = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lprofiler&lt;/code>。之后，安装包，并重新载入。&lt;/p>
&lt;h3 id="23-调试">2.3 调试&lt;/h3>
&lt;p>使用方法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-R" data-lang="R">&lt;span style="display:flex;">&lt;span>Mypkg:::start_profiler(&lt;span style="color:#a31515">&amp;#34;/tmp/profile.out&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run_cpp_codes()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mypkg:::stop_profiler()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看profile结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## text&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pprof --text src/Mypkg.so /tmp/profile.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## pdf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pprof --pdf src/Mypkg.so /tmp/profile.out &amp;gt; profile.pdf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## kcachegrind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pprof --callgrind src/Mypkg.so R/profile.out &amp;gt; profile.res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-mac系统rcpp性能检测">3. Mac系统Rcpp性能检测&lt;/h2>
&lt;p>使用&lt;code>Instruments&lt;/code>工具的&lt;code>Time profiler&lt;/code>功能，&lt;code>Instruments&lt;/code>包括在&lt;code>XCode&lt;/code>中。&lt;/p></description></item><item><title>使用RcppParallel并行计算</title><link>https://YulongNiu.github.io/posts/2018-07-19-rcppparallel-test/</link><pubDate>Thu, 19 Jul 2018 22:19:24 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2018-07-19-rcppparallel-test/</guid><description>&lt;p>在之前的&lt;a href="http://yulongniu.bionutshell.org/blog/2014/06/25/parallel-package/">博文&lt;/a>中，我详细讨论了使用多种R包实现并行计算。其中，提到一个非常重要的问题：&lt;/p>
&lt;pre>&lt;code>当循环数很大时（1万以上），`foreach`会变得非常慢。
&lt;/code>&lt;/pre>
&lt;p>这个问题在Florian Privé的&lt;a href="https://privefl.github.io/blog/a-guide-to-parallelism-in-r/">A guide to parallelism in R&lt;/a>中也提到，解释是&lt;code>foreach&lt;/code>每次只合并100个循环结果。&lt;/p>
&lt;h2 id="1-测试">1. 测试&lt;/h2>
&lt;p>我尝试使用&lt;!-- raw HTML omitted -->RcppParallel&lt;!-- raw HTML omitted -->包调用&lt;code>C++&lt;/code>的并行方法。结论是：&lt;strong>在循环数很大时，&lt;!-- raw HTML omitted -->RcppParallel&lt;!-- raw HTML omitted -->包提供的并行方法优于&lt;code>foreach&lt;/code>&lt;/strong>。&lt;/p>
&lt;p>一个简单的测试场景：对一个数值向量的每个元素做平方根运算，结果按原始顺序返回。在&lt;a href="https://gist.github.com/YulongNiu/add0d9f066299613b64b8458fd5d741a">Gist1&lt;/a>和&lt;a href="https://gist.github.com/YulongNiu/9331ea0d3ef46f0571c5f2dc061c3f8a">Gist2&lt;/a>中，分别实现了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>SqrtR&lt;/code>：用循环非并行操作每个元素。这种方法在&lt;code>R&lt;/code>语言编程中不推荐，而应该尽量“向量化”操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SqrtRforeach&lt;/code>：&lt;code>foreach&lt;/code>并行版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SqrtRParSapply&lt;/code>: &lt;code>parSapply&lt;/code>并行版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SqrtCpp&lt;/code>：&lt;code>C++&lt;/code>非并行版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SqrtCppPara&lt;/code>：&lt;!-- raw HTML omitted -->RcppParallel&lt;!-- raw HTML omitted -->包的&lt;code>C++&lt;/code>并行版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sqrt&lt;/code>：R内置的向量化方法，&lt;code>C&lt;/code>非并行版本。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>首先，比较5种实现效率，并行计算调用8个线程（Intel i7-4790 &lt;a href="mailto:CPU@3.6GHz">CPU@3.6GHz&lt;/a>）。测试结果显示&lt;code>SqrtRPara&lt;/code>（使用&lt;code>foreach&lt;/code>）和非向量化的R版本&lt;code>SqrtR&lt;/code>效率较低。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-R" data-lang="R">&lt;span style="display:flex;">&lt;span>tmp1 &amp;lt;- runif(10e3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all.equal(SqrtCpp(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtR(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtRforeach(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtRParSapply(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtCppPara(tmp1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## TRUE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>microbenchmark(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtCpp(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtR(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtRforeach(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtRParSapply(tmp1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SqrtCppPara(tmp1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## Unit: microseconds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## expr min lq mean median&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## SqrtCpp(tmp1) 56.295 72.648 9.338755e+01 82.0335&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## sqrt(tmp1) 36.216 46.074 4.865115e+01 48.3090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## SqrtR(tmp1) 3030.682 3116.718 4.229971e+03 3947.9380&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## SqrtRforeach(tmp1) 1488851.181 1532937.096 1.561865e+06 1547849.9610&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## SqrtRParSapply(tmp1) 954757.348 963478.755 9.701841e+05 969925.9090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## SqrtCppPara(tmp1) 23.837 79.314 1.069003e+02 104.5975&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## uq max neval&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 89.0800 1183.279 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 52.2995 66.875 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 4560.0930 10391.379 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 1584297.5760 1750382.995 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 974233.5690 1012400.281 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 111.9160 1331.442 100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，增加循环数，比较效率较高的前三种方法。测试结果显示调用&lt;!-- raw HTML omitted -->RcppParallel&lt;!-- raw HTML omitted -->包的&lt;code>C++&lt;/code>并行版本&lt;code>SqrtCppPara&lt;/code>胜出。&lt;/p></description></item><item><title>通过RNA-Seq评估基因表达量的模型</title><link>https://YulongNiu.github.io/posts/2018-02-17-estimate-rna-seq/</link><pubDate>Sat, 17 Feb 2018 18:23:29 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2018-02-17-estimate-rna-seq/</guid><description>&lt;p>$$
\newcommand{\tildel}{\widetilde{l_t}}
$$&lt;/p>
&lt;p>$$
\newcommand{\P}{\mathrm{P}}
$$&lt;/p>
&lt;p>$$
\DeclareMathOperator*{\argmax}{arg,max}
$$&lt;/p>
&lt;p>本文基于&lt;a href="#Ref">参考资料1&lt;/a>，展示RNA-Seq在评估基因表达量模型的细节。&lt;/p>
&lt;h2 id="1-符号表示">1. 符号表示&lt;/h2>
&lt;p>$K$个长度为$l_i$的转录序列$t_i$，构成转录本的集合$T=\{t_1, t_2, \dots, t_K\}$。单个转录组中，每个转录序列$t_i$有$c_i$个拷贝数，全部转录序列的总拷贝数为$M$。单个转录序列的相对丰度为$\rho_k=\frac{c_k}{\sum\limits_{t \in T} c_t} = \frac{c_k}{M}$，易得$\sum\limits_{k=1}^K \rho_k=1$。&lt;/p>
&lt;p>单个转录组中，全部转录片段构成集合$F=\{f_1, f_2, \dots, f_N\}$，总转录片段数目为$N=|F|$。比对到的转录序列$t_i$上的转录片段，构成集合$F_t \in F$，对应的转录片段数目为$X_t=|F_t|$。&lt;/p>
&lt;h2 id="2-简单模型">2. 简单模型&lt;/h2>
&lt;p>简单模型为：单端RNA-Seq，每一个read只比对到一个转录序列上，且每个read的长度都为定值$m$。对于转录序列$t_i$，从&lt;code>5'&lt;/code>到&lt;code>3'&lt;/code>一共可能比对上的read数目为$\tildel = l_i - m + 1$。建立模型的思路是：当给定一个read，它会被比对到某个转录序列的某个位置是一个随机事件。通过实际观测（即将read比对到转录序列），进而估计未知参数$\rho = \{\rho_1, \rho_2, \dots, \rho_K\}$。&lt;/p>
&lt;p>通过read序列比对，可得观测数据类似如下矩阵。每一行表示某个read是否比对到某个转录序列的某个位置，行和为1。$1$表示read比对到对应转录序列上，$0$表示没有比对到对应转录序列。&lt;/p>
&lt;p>$$
\left[
\begin{matrix}
0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1 \newline
0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \newline
\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \newline
0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1 \newline
\end{matrix}
\right]
$$&lt;/p></description></item><item><title>Bray-Curtis distance解释</title><link>https://YulongNiu.github.io/posts/2017-10-24-bray-curtis-distance/</link><pubDate>Tue, 24 Oct 2017 12:26:00 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-10-24-bray-curtis-distance/</guid><description>&lt;p>$$
\newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1}
$$&lt;/p>
&lt;p>Bray-Curtis distance（BCD）的定义为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
BCD(X, Y) = \frac{\sumup{|x_i - y_j|}}{\sumup{x_i} + \sumup{y_i}}
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>其中，$X$和$Y$分别为长度为$n$的数值向量。根据$\eqref{eq:1}$可以得出：$BCD$的取值范围为$[0, 1]$；当$X$和$Y$完全相同时，$BCD$为0；反之，$BCD$为1。&lt;/p>
&lt;p>同样，Bray-Curtis similarity（BCS）或Bray-Curtis index为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
BCS(X, Y) = 1 - BCD(X, Y)
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://84.89.132.1/~michael/stanford/maeb6.pdf">Chapter 6 Measures of distance and correlation between variables&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2017年10月22日&lt;/p></description></item><item><title>Normalized Google distance解释</title><link>https://YulongNiu.github.io/posts/2017-10-22-google-distance/</link><pubDate>Sun, 22 Oct 2017 21:35:30 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-10-22-google-distance/</guid><description>&lt;p>$$
\newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1}
$$&lt;/p>
&lt;p>本文尝试探索Normalized Google distance（简称NGD）的定义和拓展应用。&lt;/p>
&lt;h3 id="1-ngd原始定义">1. NGD原始定义&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Normalized_Google_distance">维基百科&lt;/a>的定义为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
NGD(x, y) = \frac{\max{\log f(x), \log f(y)} - \log f(x, y)}{\log N - \min{\log f(x), \log f(y)}}
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>其中，$f(x)$和$f(y)$分别为关键词$x$和$y$出现的次数，$f(x,y)$为$x$和$y$同时出现的次数，$N$为全部搜索单词数目。根据$\eqref{eq:1}$可以得出：如果$x$和$y$几乎总是同时出现时，$NGD$趋近于$0$；如果$x$和$y$出现的次数很少，即$\log f(x,y)$趋近于负无穷，则$NGD$可能大于$1$。&lt;/p>
&lt;h3 id="2-ngd定义延伸">2. NGD定义延伸&lt;/h3>
&lt;p>Choi and Rashid在2008年的&lt;a href="#Ref">文章&lt;/a>提出一种针对向量的$NGD$定义：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
NGD(X, Y) &amp;amp;= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\sumup{x_i} + \sumup{y_i} - \sumup{\min(x_i, y_i)}} \newline
&amp;amp;= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\max\left\{\sumup{x_i}, \sumup{y_i}\right\}}
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p></description></item><item><title>最大熵模型</title><link>https://YulongNiu.github.io/posts/2017-10-16-max-entropy/</link><pubDate>Mon, 16 Oct 2017 13:16:12 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-10-16-max-entropy/</guid><description>&lt;h3 id="1-熵和条件熵">1. 熵和条件熵&lt;/h3>
&lt;p>对于随机变量$X$，熵为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
H(X) = -\sum_{x \in X}p(x)\log{p(x)}
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>其中：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
\sum_{x \in X}p(x) = 1
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p>
&lt;p>同样道理，对于任意随机变量$X$和$Y$，联合熵为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
H(X,Y) = -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)}
\end{split}
\label{eq:3}
\end{align}
$$&lt;/p>
&lt;p>基于$X$的$Y$的熵为条件熵：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
H(Y|X) &amp;amp;= H(X, Y) - H(X) \newline
&amp;amp;= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X}p(x)\log{p(x)} \newline
&amp;amp;= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X, y \in Y}p(x, y)\log{p(x)} \newline
&amp;amp;= -\sum_{x \in X, y \in Y}p(x, y)\log \frac{p(x, y)}{p(x)}
\end{split}
\label{eq:4}
\end{align}
$$&lt;/p></description></item><item><title>朴素贝叶斯分类器应用于二元数据类型</title><link>https://YulongNiu.github.io/posts/2017-10-15-naive-bayes-binary-multinomial/</link><pubDate>Sun, 15 Oct 2017 17:38:16 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-10-15-naive-bayes-binary-multinomial/</guid><description>&lt;h3 id="1-贝叶斯定理">1. 贝叶斯定理&lt;/h3>
&lt;p>已知事件$A$和$B$，则条件概率为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
P(A | B) &amp;amp;= \frac{P(A,B)}{P(B)} \newline
P(B | A) &amp;amp;= \frac{P(A,B)}{P(A)}
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>可以推导出：&lt;/p>
&lt;p>$$
\begin{align}
P(B|A) = \frac{P(A|B)P(B)}{P(A)}
\label{eq:2}
\end{align}
$$&lt;/p>
&lt;h3 id="2-分类器简介">2. 分类器简介&lt;/h3>
&lt;p>朴素贝叶斯分类器（Naive Bayes classifier）是一种简单、有效的分类器，其难点在于估算条件概率。比如，一个数据集拥有$N$个相互独立的特征，$C$个分组，对于$C_j$条件概率模型为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
p(C_j|F_1,\cdots,F_n) &amp;amp;= \frac{p(F_1,\cdots,F_n|C_j)p(C_j)}{p(F_1,\cdots,F_n)} \newline
&amp;amp;= p(F_1|C_j) \cdots p(F_n|C_j)p(C_j)(1/p(F_1,\cdots,F_n))
\end{split}
\label{eq:3}
\end{align}
$$&lt;/p>
&lt;p>由于$1/p(F_1,\cdots,F_n)$在不同分组中为定值，因此：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
p(C_j|F_1,\cdots,F_n) &amp;amp;\propto p(C_j)\prod_{i=1}^{N}p(F_i|C_j)
\end{split}
\label{eq:4}
\end{align}
$$&lt;/p>
&lt;p>其中，$p(C_j)$通常容易求得，即$C_j$分组在测试数据集中出现的频率。而$p(F_i\ \vert C_j)$则根据不同的测试数据类型，有不同的估计值。&lt;/p>
&lt;p>以下讨论两种二元数据类型，例如某个数据集有三种特征量：&lt;/p>
&lt;p>$$
F =
\left[
\begin{array}{f}
F_1 \newline
F_2 \newline
F_3
\end{array}
\right]
$$&lt;/p></description></item><item><title>Shadowsocks设置推荐</title><link>https://YulongNiu.github.io/posts/2017-06-14-shadowsocks-setup/</link><pubDate>Wed, 14 Jun 2017 23:49:13 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-06-14-shadowsocks-setup/</guid><description>&lt;h2 id="1-shadowsocks客户端">1. Shadowsocks客户端&lt;/h2>
&lt;p>Shadowsocks在主流平台上都有&lt;a href="https://shadowsocks.org/en/download/clients.html">客户端&lt;/a>，下载直接使用即可。对于Linux平台，可能还需要在Chrome浏览器中安装&lt;a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en">SwitchyOmega&lt;/a>插件。&lt;/p>
&lt;h2 id="2-谷歌设置">2. 谷歌设置&lt;/h2>
&lt;p>进入&lt;a href="https://encrypted.google.com/preferences?hl=zh-CN#languages">网址&lt;/a>，设置自己喜欢的语言，之后重启即可。&lt;/p>
&lt;h2 id="3-自己配置shadowsocks">3. 自己配置Shadowsocks&lt;/h2>
&lt;h3 id="31-软件准备">3.1 软件准备&lt;/h3>
&lt;p>参考&lt;a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks网站&lt;/a>安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf copr enable librehat/shadowsocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install shadowsocks-libev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="32-配置文件">3.2 配置文件&lt;/h3>
&lt;p>文件位置&lt;code>/etc/shadowsocks-libev/config.json&lt;/code>，设置模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;server&amp;#34;:&amp;#34;0.0.0.0&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;port_password&amp;#34;:{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;8381&amp;#34;:&amp;#34;******&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;8382&amp;#34;:&amp;#34;******&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;timeout&amp;#34;:600,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;method&amp;#34;:&amp;#34;aes-256-cfb&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="33-启动">3.3 启动&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo ss-manager -c /etc/shadowsocks-libev/config.json --manager-address 127.0.0.1:8000 -u config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-使用tcp-bbr加速">4. 使用TCP BBR加速&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo echo &lt;span style="color:#a31515">&amp;#34;net.core.default_qdisc=fq&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo echo &lt;span style="color:#a31515">&amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo sysctl -p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo sysctl net.ipv4.tcp_available_congestion_control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo sysctl net.ipv4.tcp_congestion_control
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-全局配置">5. 全局配置&lt;/h2>
&lt;p>使用proxychains全局调用Shadowsocks。&lt;/p></description></item><item><title>探索Java基本类型的二进制表示</title><link>https://YulongNiu.github.io/posts/2017-05-16-java-binary/</link><pubDate>Tue, 16 May 2017 20:17:46 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2017-05-16-java-binary/</guid><description>&lt;h2 id="1-基本数据类型">1. 基本数据类型&lt;/h2>
&lt;p>Java有&lt;a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2">八种&lt;/a>基本数据类型（primitive data type），分别是&lt;code>boolean&lt;/code>、&lt;code>char&lt;/code>、&lt;code>byte&lt;/code>、&lt;code>short&lt;/code>、&lt;code>int&lt;/code>、&lt;code>long&lt;/code>、&lt;code>float&lt;/code>和&lt;code>double&lt;/code>，所占用的比特数如下表所示。&lt;/p>





&lt;table class="table table-responsive table-striped">
 &lt;thead>
 &lt;tr>
 &lt;th>Data type&lt;/th>
 &lt;th>Bit&lt;/th>
 &lt;th>Range&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>boolean&lt;/td>
 &lt;td>not precisely defined&lt;/td>
 &lt;td>&lt;code>True&lt;/code> or &lt;code>false&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>char&lt;/td>
 &lt;td>unsigned 16&lt;/td>
 &lt;td>$2^{16}$&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>byte&lt;/td>
 &lt;td>signed 8&lt;/td>
 &lt;td>$-2^{7}$ ~ $2^7-1$&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>short&lt;/td>
 &lt;td>signed 16&lt;/td>
 &lt;td>$-2^{15}$ ~ $2^{15}-1$&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>int&lt;/td>
 &lt;td>signed 32&lt;/td>
 &lt;td>$-2^{31}$ ~ $2^{31}-1$&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>long&lt;/td>
 &lt;td>signed 64&lt;/td>
 &lt;td>$-2^{63}$ ~ $2^{63}-1$&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>float&lt;/td>
 &lt;td>signed 32&lt;/td>
 &lt;td>$\pm (1-2^{-24}) * 2^{128}$ 精度$2^{-126}$&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
 

&lt;h2 id="2-整数二进制表示和范围">2. 整数二进制表示和范围&lt;/h2>
&lt;p>以&lt;code>byte&lt;/code>类型为例，每个整数占用了8个比特，最左边比特位表示正负（0为正，1为负）。例如，$1$表示为$0000 0001_2$。因此，能表示的最大正整数为$0111 1111_2$，即&lt;/p>
&lt;p>$$
2^0 + 2^1 + 2^2 + \cdots + 2^6 = 2^7 - 1
$$&lt;/p></description></item><item><title>两个git的rebase命令应用</title><link>https://YulongNiu.github.io/posts/2016-11-11-git-rebase-examples/</link><pubDate>Fri, 11 Nov 2016 16:24:39 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-11-11-git-rebase-examples/</guid><description>&lt;p>介绍两个&lt;code>git rebase&lt;/code>的应用场景，一个是合并commits记录，另一个是贡献代码。&lt;/p>
&lt;h2 id="1-合并commit记录">1. 合并commit记录&lt;/h2>
&lt;p>假定有多条commits，按照离当前时间从近至远依次为：&lt;code>c1&lt;/code>、&lt;code>b2&lt;/code>、&lt;code>b1&lt;/code>和&lt;code>a1&lt;/code>。希望合并&lt;code>c1&lt;/code>、&lt;code>b2&lt;/code>和&lt;code>b1&lt;/code>，即只保留&lt;code>c1&lt;/code>和&lt;code>a1&lt;/code>。操作流程如下：&lt;/p>
&lt;ul>
&lt;li>打开交互式rebase&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git rebase -i sha1id-of-a1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>标记合并commits&lt;/li>
&lt;/ul>
&lt;p>弹出的文本编辑器初始可能为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>pick sha1id-of-c1 c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pick sha1id-of-b2 b2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pick sha1id-of-b1 b1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>pick sha1id-of-c1 c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squash sha1id-of-b2 b2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squash sha1id-of-b1 b1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>记录合并commits&lt;/li>
&lt;/ul>
&lt;p>在弹出的文本编辑器中标记和注释commits&lt;/p>
&lt;ul>
&lt;li>提交远程&lt;/li>
&lt;/ul>
&lt;p>由于本地和远程记录不一致，需要强制合并。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git push -f origin mybranch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-贡献代码">2. 贡献代码&lt;/h2>
&lt;ul>
&lt;li>Fork项目&lt;/li>
&lt;/ul>
&lt;p>Fork在GitHub对应的项目（famous/project，master分支）至自己账户（my/project），克隆至本地并添加远程地址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/my/project.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git remote add upstream https://github.com/famous/project.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>建立分支并提交修改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git checkout -b devbranch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -a -m &lt;span style="color:#a31515">&amp;#39;these commits&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin devbranch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>获取和合并最新远程修改&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git pull upstream master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git checkout devbranch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git rebase master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## compare and merge the latest commits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git rebase --continue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## force push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push -f origin devbranch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>发起pull request。&lt;/li>
&lt;/ul>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://itspg.logdown.com/posts/1731-git-squash-master-commits">合并分支&lt;/a>&lt;/p></description></item><item><title>命令行使用Google Drive</title><link>https://YulongNiu.github.io/posts/2016-10-21-linux-sync-google-drive/</link><pubDate>Fri, 21 Oct 2016 18:24:31 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-10-21-linux-sync-google-drive/</guid><description>&lt;p>&lt;strong>推荐使用更更方便的&lt;a href="https://github.com/bcedu/VGrive">VGrive&lt;/a>。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>推荐使用更方便的&lt;a href="https://liberodark.github.io/ODrive/">ODrive&lt;/a>。&lt;/strong>&lt;/p>
&lt;p>本文简单介绍&lt;a href="https://github.com/prasmussen/gdrive">gdrive&lt;/a>，它是一个跨多个平台软件，提供命令行操作Google Drive。同类软件还有&lt;a href="https://github.com/odeke-em/drive">drive&lt;/a>和&lt;a href="https://www.thefanclub.co.za/overgrive">overGrive&lt;/a>（Linux下Google Drive界面客户端）。&lt;/p>
&lt;p>基本思路：对每一个上传至Google Drive的文件或文件夹都分配一个Id，所以云端操作需要指定Id。&lt;/p>
&lt;p>突出优点：自动同步，比较云端和本地文件后，决定上传、删除或者替换；同步加入版本控制，可以下载和删除不同版本文件。&lt;/p>
&lt;h2 id="1-初始化">1. 初始化&lt;/h2>
&lt;p>&lt;a href="https://github.com/prasmussen/gdrive">下载&lt;/a>系统对应版本，执行&lt;code>gdrive about&lt;/code>，根据提示设置。&lt;/p>
&lt;h2 id="2-查找">2. 查找&lt;/h2>
&lt;p>&lt;a href="https://developers.google.com/drive/v3/web/search-parameters">查找规则&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查找所有文件夹，不包括垃圾箱，所有者为自己&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive list --query &lt;span style="color:#a31515">&amp;#34;mimeType = &amp;#39;application/vnd.google-apps.folder&amp;#39; and trashed = false and &amp;#39;me&amp;#39; in owners&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 加入上层目录Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdrive list --query &lt;span style="color:#a31515">&amp;#34;mimeType = &amp;#39;application/vnd.google-apps.folder&amp;#39; and trashed = false and &amp;#39;me&amp;#39; in owners and &amp;#39;YUlPWWdLcy1mX2c&amp;#39; in parents&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查询信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdrive info YUlPWWdLcy1mX2c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-建立和删除">3. 建立和删除&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 建立文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive mkdir newFolder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 建立下一层文件夹，-p指定上层目录Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive mkdir -p M1h4M1dGYUhpSFE newFolder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 删除文件（文件Id，非名称）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive delete 0BzTeuubJesi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 删除文件夹（文件Id，非名称）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive delete -r 0BzTeuubJesi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-普通上传和下载">4. 普通上传和下载&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 上传文件至制定文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive upload -p M1h4M1dGYUhpSFE myFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 下载文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive download 0BzTeuubJesi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-同步">5. 同步&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## gdrive sync会标记同步文件，因此不要在同步文件夹中使用gdrive upload或者网页上传文件。未标记文件会被忽略。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 同步列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive sync list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 同步列表内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive sync content VUxydm5iMnM5LWs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 上传&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive sync upload myLocaldir 0BzTeuubJesi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 下载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gdrive sync download 0BzTeuubJesi myLocaldir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查询所有版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdrive revision list YUlPWWdLcy1mX2c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 下载某一版本，最后两个Id分别为文件Id和版本Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdrive revision download YUlPWWdLcy1mX2c Y3JBWEJ5a0gwZndlR3hzWlZubFlUMWFnaHVnPQ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 删除某一版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gdrive revision delete YUlPWWdLcy1mX2c Y3JBWEJ5a0gwZndlR3hzWlZubFlUMWFnaHVnPQ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2019年4月27日&lt;/p></description></item><item><title>如何在Nature communications上发表文章</title><link>https://YulongNiu.github.io/posts/2016-09-22-how-to-publish-in-nc/</link><pubDate>Thu, 22 Sep 2016 16:25:13 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-09-22-how-to-publish-in-nc/</guid><description>&lt;p>我最近看到一个&lt;a href="http://spotidoc.com/doc/159334/how-to-get-published-in-nature-communications">幻灯片&lt;/a>，主要讲了在Nature Communications（NC）上发表文章的建议，作者是NC的副主编Nicky Dean。整个幻灯片一种轻松幽默的口吻，讲述了投稿和发表文章过程的各种问题，并提出了针对性建议，值得推荐。以下记录一些关键信息。&lt;/p>
&lt;h3 id="投稿前注意事项">投稿前注意事项&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Nature杂志（可能此处也指NC）只考虑有重大创新（conceptually novel）的工作，而不是补充完善数据类型研究。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不要有快速发表的想法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不介意会议报告或者预印服务网站发表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>介意发表在出版的会议录（conference proceedings）或者其他大规模传播的媒介上。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="准备充分">准备充分&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>问问自己这个研究适合于本领域的哪些地方？这个研究是否有显著的进步？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从一开始就好好准备文稿，比如文稿有清晰的结构、容易理解，并且能够传达出最主要信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>阅读《作者须知》，使得文稿符合杂志的要求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="准备cover-letters">准备cover letters&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>解释工作的创新，但不要过了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>推荐审稿人，但不能都是自己的熟人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以推荐需要屏蔽的审稿人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>明确一切相关的正在发表或者已经投稿的文章。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="文章要素">文章要素&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>解释清楚研究领域背景，即回答“我们为什么要重视这项研究？”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清晰地描述做了什么工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连接研究内容和领域背景，以说服别人这项研究确实有重大突破。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发表文章的目的是为了更有效地交流，而不是显示自己有聪明!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="nc编辑审核常规要点">NC编辑审核常规要点&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>研究的创新性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>作者或者他人之前的研究。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参考文献是否完成，是否重大遗漏。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="应对审稿人意见">应对审稿人意见&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>如果被邀请重新提交文章，确保文章解决了&lt;strong>所有&lt;/strong>审稿人提出的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果被要求进一步实验，不要尝试规避。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保持专业，不要使用侮辱性语言、自大或者恐吓。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>审稿人也可能会犯错，并且记住他们是自己同行专家。不管怎样，以后大家还是要一起打交道。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2016年9月22日&lt;/p></description></item><item><title>HISAT2使用问答</title><link>https://YulongNiu.github.io/posts/2016-09-10-hisat2-faq/</link><pubDate>Sat, 10 Sep 2016 16:32:47 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-09-10-hisat2-faq/</guid><description>&lt;p>&lt;a href="https://ccb.jhu.edu/software/hisat2/manual.shtml#the-hisat2-build-indexer">HISAT2&lt;/a>是一款用于“对应（map）”二代测序数据（全基因组、转录组和外显子组）至目标基因组的工具，用来替代&lt;a href="http://ccb.jhu.edu/software/hisat/index.shtml">HISAT&lt;/a>和&lt;a href="http://www.ccb.jhu.edu/software/tophat/index.shtml">TopHat2&lt;/a>。本文汇集一些使用HISAT2的常见问题问答。&lt;/p>
&lt;h3 id="如何解读hisat2的输出统计">如何解读HISAT2的输出统计？&lt;/h3>
&lt;p>一个常见的双端测序样本HISAT2输出统计：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>10000 reads; of these:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 10000 (100.00%) were paired; of these:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 650 (6.50%) aligned concordantly 0 times
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 8823 (88.23%) aligned concordantly exactly 1 time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 527 (5.27%) aligned concordantly &amp;gt;1 times
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 650 pairs aligned concordantly 0 times; of these:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 34 (5.23%) aligned discordantly 1 time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 616 pairs aligned 0 times concordantly or discordantly; of these:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1232 mates make up the pairs; of these:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 660 (53.57%) aligned 0 times
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 571 (46.35%) aligned exactly 1 time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1 (0.08%) aligned &amp;gt;1 times
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>96.70% overall alignment rate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>总共10000对reads；&lt;/p></description></item><item><title>常用参考基因组下载地址</title><link>https://YulongNiu.github.io/posts/2016-09-10-reference-genome-location/</link><pubDate>Sat, 10 Sep 2016 13:17:00 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-09-10-reference-genome-location/</guid><description>&lt;p>本文收集了一些常用参考基因组的下载网址和补充说明。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.ncbi.nlm.nih.gov/genome/">NCBI genome&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://uswest.ensembl.org/info/data/ftp/index.html">Ensembl FTP&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://hgdownload.cse.ucsc.edu/goldenPath/">UCSC FTP&lt;/a>：cytoband文件可能含有&lt;code>gneg&lt;/code>等标识，其中&lt;code>acen&lt;/code>表示着丝粒区域、&lt;code>stalk&lt;/code>表示近端着丝粒区域、&lt;code>gvar&lt;/code>表示异染色质，例如臂间或端粒区域。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.gencodegenes.org/">GENCODE&lt;/a>：只有人和大鼠，注释较好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://support.illumina.com/sequencing/sequencing_software/igenome.html">iGenomes&lt;/a>：部分模式生物bowtie、bowtie2和BWA索引基因组。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ccb.jhu.edu/software/hisat2/index.shtml">HISAT2&lt;/a>：部分模式生物HISAT2索引基因组。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2018年8月6日&lt;/p></description></item><item><title>为什么不推荐在R语言中随意按照下标操作矩阵</title><link>https://YulongNiu.github.io/posts/2016-07-21-subset-matrix-in-r/</link><pubDate>Thu, 21 Jul 2016 19:35:29 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-07-21-subset-matrix-in-r/</guid><description>&lt;p>这篇博文的目的是展示R语言中下标操作矩阵的潜在问题。R语言提供了多种方法提取一个矩阵的单个或者部分元素，不同方法对应的效率在Hadley Wickham的&lt;a href="http://adv-r.had.co.nz/Performance.html#language-performance">Advance R&lt;/a>中已有讨论。这些方法中，使用最广泛的是通过下标（行或者列）取值，即操作符&lt;code>[&lt;/code>。然而，这种方法存在潜在问题，即内存中会拷贝原始对象。&lt;/p>
&lt;p>举例：首先建立一个矩阵，之后取这个矩阵除了第一行之外的部分，接下来操作这个部分矩阵。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-R" data-lang="R">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## step1: build matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &amp;lt;- 8000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmp1 &amp;lt;- matrix(rnorm(n * n), nrow = n, ncol = n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gc()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## step2: manipulate a subset of matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sink(&lt;span style="color:#a31515">&amp;#39;/dev/null&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apply(tmp1[2:n, ], 1, &lt;span style="color:#00f">function&lt;/span>(x) x[1])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sink()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## step3: garbage collection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gc()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内存使用情况如下：&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/R_apply_memory.png" alt="R_apply_memory.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标记1内存上升，因为建立了&lt;code>tmp1&lt;/code>的矩阵；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标记2内存再次上升，主要因为使用下标取矩阵操作，&lt;code>tmp1[2:n, ]&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标记3内存下降，因为手动执行垃圾回收。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>可以明显看到内存中多余的垃圾对象。如果使用&lt;code>for&lt;/code>循环形式，就可以有效避免内存对象拷贝。虽然，R在内存空间不足时，会自动执行&lt;code>gc()&lt;/code>。但是，执行程序时，不能全指望自动垃圾回收，毕竟有时回收得并不及时，而新的对象又相继生成。这种情况下，内存空间不足就成为很严重的问题。&lt;/p>
&lt;p>R版本&lt;code>3.3.1&lt;/code>。&lt;/p>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2016年7月21日&lt;/p></description></item><item><title>C语言指针记录</title><link>https://YulongNiu.github.io/posts/2016-04-17-pointers-in-c/</link><pubDate>Sun, 17 Apr 2016 22:42:25 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-04-17-pointers-in-c/</guid><description>&lt;h2 id="1-c语言指针基础">1. C语言指针基础&lt;/h2>
&lt;p>C语言的指针设计是一致和优雅的。C语言中“指针（pointer）”就是&lt;strong>地址&lt;/strong>（所以不能用普通整数储存地址），“指针变量（pointer variable）”是存储地址的变量。一个指针变量，&lt;strong>只能&lt;/strong>指向一个特定类型的变量，比如整数、浮点数、字符或者指针。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2b91af">int&lt;/span> tmp1 = 1, tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/* &amp;#34;=&amp;#34; does not mean &amp;#34;assignment&amp;#34;, it just means &amp;#34;initiating&amp;#34; */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/* p is the address of tmp1, *p is equal to the value of tmp1*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2b91af">int&lt;/span> *p = &amp;amp;tmp1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2b91af">int&lt;/span> *q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q = &amp;amp;tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/* p points to tmp1, q points to tmp2, now the value of tmp2 is 1*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*p = *q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/* p and q now both points to tmp1*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q = p;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-指针运算有且只有三种">2. 指针运算有且只有三种&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>指针加一个整数，该表达式值为同类型指针；&lt;/p></description></item><item><title>Docker使用记录</title><link>https://YulongNiu.github.io/posts/2016-03-11-docker-use/</link><pubDate>Fri, 11 Mar 2016 16:53:51 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-03-11-docker-use/</guid><description>&lt;p>关于Docker的安装和使用，有详细的&lt;a href="https://docs.docker.com/">文档&lt;/a>可供参考。本文收集一些有趣和重要的记录。&lt;/p>
&lt;h2 id="1-普通用户权限执行docker">1. 普通用户权限执行Docker&lt;/h2>
&lt;p>创建&lt;code>docker&lt;/code>用户组并添加普通用户。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo groupadd docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo usermod -aG docker myUserName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注销后，再次登录即可。&lt;/p>
&lt;h2 id="2-docker命令集锦">2. Docker命令集锦&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 测试Docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Docker镜象列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker image ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker image ls --digests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Docker容器列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker container ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker container ls --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 列出容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker ps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker ps -al
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 终止所有容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker stop &lt;span style="color:#00f">$(&lt;/span>docker ps -aq&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 删除镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker image rm myImg@sha256:xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 删除虚悬镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker ps -a | grep &lt;span style="color:#a31515">&amp;#34;Exited&amp;#34;&lt;/span> | awk &lt;span style="color:#a31515">&amp;#39;{print $1 }&amp;#39;&lt;/span>|xargs docker stop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker ps -a | grep &lt;span style="color:#a31515">&amp;#34;Exited&amp;#34;&lt;/span> | awk &lt;span style="color:#a31515">&amp;#39;{print $1 }&amp;#39;&lt;/span>|xargs docker rm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker images|grep none|awk &lt;span style="color:#a31515">&amp;#39;{print $3 }&amp;#39;&lt;/span>|xargs docker rmi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-运行镜象">3. 运行镜象&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -it --rm myDockerImage myCommand
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-挂载卷">4. 挂载卷&lt;/h2>
&lt;p>挂载文件目录至容器，可以挂载多个。&lt;/p></description></item><item><title>Rcpp操作矩阵和向量集锦</title><link>https://YulongNiu.github.io/posts/2016-01-07-rcpp-matrix/</link><pubDate>Thu, 07 Jan 2016 20:50:41 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2016-01-07-rcpp-matrix/</guid><description>&lt;p>收集和记录&lt;!-- raw HTML omitted -->Rcpp&lt;!-- raw HTML omitted -->或者&lt;!-- raw HTML omitted -->RcppArmadillo&lt;!-- raw HTML omitted -->操作矩阵和向量。&lt;/p>
&lt;h2 id="1-rcpp">1. &lt;!-- raw HTML omitted -->Rcpp&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;ul>
&lt;li>可以使用逻辑下标（&lt;code>LogicalVector&lt;/code>）对向量和列表&lt;a href="http://gallery.rcpp.org/articles/subsetting/">取值&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h2 id="2-rcpparmadillo">2. &lt;!-- raw HTML omitted -->RcppArmadillo&lt;!-- raw HTML omitted -->&lt;/h2>
&lt;p>基本类型是&lt;code>mat&lt;/code>、&lt;code>vec&lt;/code>（&lt;code>colvec&lt;/code>）和&lt;code>rowvec&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>属性&lt;/p>
&lt;ul>
&lt;li>对于矩阵，行数：&lt;code>m.n_rows;&lt;/code>；列数：&lt;code>m.n_cols;&lt;/code>；维度：&lt;code>m.size();&lt;/code>或&lt;code>size(m);&lt;/code>。对于向量，元素数：&lt;code>v.n_elem;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>特殊向量或矩阵&lt;/p>
&lt;ul>
&lt;li>
&lt;p>全是1&lt;code>ones&amp;lt;mat&amp;gt;(3, 4);&lt;/code>/&lt;code>vec(10, fill::ones);&lt;/code>/；全是0&lt;code>zeros&amp;lt;vec&amp;gt;(10);&lt;/code>/&lt;code>mat(3, 4, fill::zeros);&lt;/code>；全是某个数&lt;code>mat a(4, 5); a.fill(123.4);&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>连续向量，规定长度&lt;code>linspace&amp;lt;vec&amp;gt;(0, 5, 6);&lt;/code>；连续向量，规定间距&lt;code>regspace&amp;lt;vec&amp;gt;(0, 2, 9);&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>取值&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于向量，连续取值：&lt;code>v.subvec(1stIdx, lastIdx);&lt;/code>；非连续，可以考虑使用&lt;code>find()&lt;/code>函数，比如：&lt;code>v.elem(find(v &amp;gt; 0));&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于矩阵，连续取值：&lt;code>m.col(Idx);&lt;/code>/&lt;code>m.row(Idx);&lt;/code>/&lt;code>m.cols(Idx);&lt;/code>/&lt;code>m.rows(Idx);&lt;/code>/&lt;code>m.submat(1stRowIdx, lastRowIdx, 1stColIdx, lastColIdx);&lt;/code>；非连续，&lt;code>m.submat(vecRowIdx, vecColIdx);&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Rcpp矩阵转换为RcppArmadillo矩阵，可以避免拷贝矩阵，以提升效率，&lt;code>mat(ptr_aux_mem, n_rows, n_cols, copy_aux_mem = true, strict = false);&lt;/code>。同样道理，可以转化向量。例如：&lt;/p></description></item><item><title>XML中XPath规则总结</title><link>https://YulongNiu.github.io/posts/2015-10-25-xpath-xml/</link><pubDate>Sun, 25 Oct 2015 19:05:33 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-10-25-xpath-xml/</guid><description>&lt;p>&lt;a href="http://www.w3.org/TR/xpath-30/">XPath&lt;/a>提供了一种对XML节点、节点属性和内容快速查询的规则。在各种编程语言中都有实现，比如C语言的&lt;a href="http://www.xmlsoft.org/">libxml2&lt;/a>和对应的R包 &lt;a href="https://cran.r-project.org/web/packages/xml2/index.html">xml2&lt;/a>。&lt;/p>
&lt;h2 id="1-查询规则">1. 查询规则&lt;/h2>
&lt;p>XPath查询集中在三个对象：节点、节点属性和节点内容。&lt;/p>
&lt;h3 id="11-选择节点">1.1 选择节点&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB&lt;/code>：nodeA为根节点，nodeA下的所有nodeB节点；等价于&lt;code>nodeB&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeB&lt;/code>：所有nodeB节点，在R包xml2中（比如函数&lt;code>xml_find_all()&lt;/code>），&lt;code>//nodeB&lt;/code>搜索范围是整个文档，忽略当前节点；而&lt;code>.//nodeB&lt;/code>搜索范围是当前节点之下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeB[1]&lt;/code>：所有nodeB节点的第一个；&lt;code>//nodeB[last()-1]&lt;/code>：所有nodeB节点的倒数第二个；&lt;code>nodeA/nodeB[position()&amp;lt;3]&lt;/code>:当前nodeA节点，其下所有nodeB子节点的前两个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/nodeA/*&lt;/code>：nodeA为根节点，nodeA下的所有节点；&lt;code>/*/*/nodeC&lt;/code>：所有拥有两个父节点的nodeC节点；&lt;code>//*&lt;/code>：所有节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//*[count(nodeD)=3]&lt;/code>：含有3个nodeD子节点的节点；&lt;code>//*[count(*)=2]&lt;/code>：含有任意2个子节点的节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//*[name()='nodeB']&lt;/code>：所有名称为“nodeB”的节点，等价于&lt;code>//nodeB&lt;/code>；&lt;code>//*[starts-with(name(),'N')]&lt;/code>：所有名称以“N”开头的节点；&lt;code>//*[contains(name(),'N')]&lt;/code>：所有名称中含有“N”的节点；&lt;code>//*[string-length(name()) = 3]&lt;/code>：所有名称的字符串长度等于3的节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeA | //nodeB&lt;/code>：所有nodeA，以及nodeB的节点，多个搜索条件合并，搜索添加没有限制。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-选择节点属性">1.2 选择节点属性&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>//@attr1&lt;/code>：所有拥有attr1的&lt;strong>属性&lt;/strong>，注意：返回的不是节点，而是类此&lt;code>attr1=text1&lt;/code>的属性；&lt;code>//node1/@attr1&lt;/code>：所有node1带有的attr1属性；&lt;code>//nodeB[@attr1]&lt;/code>：所有拥有“attr1”属性的nodeB节点；&lt;code>//nodeB[@attr1='test1']&lt;/code>：所有拥有“attr1”属性为“test1”的nodeB节点；&lt;code>//nodeB[normalize-space(@attr1)='test1']&lt;/code>：所有拥有attr1属性为“test1”（属性去除字符串前后空格，内部连续空格替换为一个空格）的nodeB节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//node1[@*]&lt;/code>：所有node1带有任意属性的节点；&lt;code>//node1[not(@*)]&lt;/code>：所有node1不带属性的节点；&lt;code>//node1[contains(@attr1, 'N')]&lt;/code>：带有“attr1”属性的node1节点，“attr1”属性中含有“N”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//node1[TEST1][TEST2]&lt;/code>：多个属性形选择可以首位相接，依次判断是否为真。TEST1和TEST2同时为真，返回选择结果。&lt;code>//nodeA[nodeB/@attr1='test1']&lt;/code>：选择所有nodeA节点，这些nodeA节点拥有nodeB子节点且属性“attr1”为“test1”。&lt;code>//nodeC[@attr1='test1'][../nodeB/@attr2='test2']&lt;/code>：选择所有拥有“attr1”为“test1”的nodeC节点，而且这些nodeC节点有属性“attr2”为“test2”的nodeB父亲节点。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="13-选择节点内容">1.3 选择节点内容&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB[nodeC&amp;gt;5]&lt;/code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB[nodeC&amp;gt;5]/nodeD&lt;/code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC[.=5]&lt;/code>：所有nodeC节点，其内容等于5。使用&lt;code>.&lt;/code>代替自身。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/node()&lt;/code>：选择所有nodeC节点下的所有点，包括节点下内容和子节点（距离最近，不包括子节点的子节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/text()&lt;/code>：选择所有nodeC节点下的内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="14-函数使用">1.4 函数使用&lt;/h3>
&lt;ul>
&lt;li>&lt;code>//nodeC[contains(text(), 'test1')]&lt;/code>：选择所有nodeC节点，而且nodeC节点下内容包括“test1”。&lt;/li>
&lt;/ul>
&lt;h2 id="2-轴">2. 轴&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>child::&lt;/code>：默认轴，可以省略。比如&lt;code>/child::nodeA&lt;/code>等价于&lt;code>/AAA&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>descendant::&lt;/code>：选择上下文节点的所有子节点、子节点的子节点、子节点的子节点的子节点（依次类推，直至最后一个子节点）。&lt;code>//nodeA/descendant::*&lt;/code>：所有nodeA节点的所有子节点、子节点的子节点等等；&lt;code>//nodeA/descendant::nodeC&lt;/code>：所有nodeA节点的所有的nodeC子节点，nodeC可能是nodeA的某个子节点的子节点，区别与&lt;code>//nodeA/nodeD&lt;/code>；&lt;code>/descendant::*&lt;/code>：文档所有子节点、子节点的子节点等等，等价于&lt;code>//*&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>descendant-or-self::*&lt;/code>：选择上下文节点自身及其所有子节点、子节点的子节点（依次类推，直至最后一个子节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>parent::&lt;/code>：选择上下文节点的父节点（最靠近的父节点）。&lt;code>//nodeC/parent::*&lt;/code>：所有nodeC节点的所有父节点；&lt;code>//nodeC/parent::nodeA[@attr1='test1']&lt;/code>：nodeC节点的nodeA父节点，这些nodeA父节点的“attr1”属性等于“test1”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ancestor::&lt;/code>：选择上下文节点的父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。&lt;code>//nodeC/ancestor::nodeA&lt;/code>：所有nodeC的父节点和父节点的父节点等等中的nodeA节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ancestor-or-self::&lt;/code>：：选择上下文节点自身及其所有父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>following-sibling::&lt;/code>：选择与上下文节点等级相同（即深度相同）的且位置靠后（上为前，下为后）的兄弟节点。&lt;code>//nodeC/following-sibling::*&lt;/code>：所有nodeC节点等级相同的且位置靠后的兄弟节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>preceding-sibling::&lt;/code>：同&lt;code>following-sibling::&lt;/code>，也是兄弟节点但位置靠前。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>following::&lt;/code>：选择上下文节点之后的所有节点（包括对应的子节点），但除了根节点。&lt;code>//nodeC/following::*&lt;/code>：所有nodeC节点之后的所有节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>preceding::&lt;/code>：选择上下文节点之前的所有节点（包括对应的子节点），但除了根节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/ancestor::* | //nodeC/descendant::* | //nodeC/following::* | //nodeC/preceding::* | //nodeC/self::*&lt;/code>：所有节点，等价于&lt;code>//*&lt;/code>或者等价于&lt;code>/descendant::*&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考网址">参考网址&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/XPath">维基百科对XPath介绍&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.zvon.org/xxl/XPathTutorial/General_chi/examples.html">zvon中XPath的有趣例子&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.w3school.com.cn/xpath/index.asp">w3school的XPath中文教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://xccds1977.blogspot.sg/2013/02/xmlxpath.html">博文《XML和XPath使用方法备忘》&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2018年12月25日&lt;/p></description></item><item><title>Spacemacs使用记录</title><link>https://YulongNiu.github.io/posts/2015-09-30-spacemacs-tutorial/</link><pubDate>Wed, 07 Oct 2015 22:09:31 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2015-09-30-spacemacs-tutorial/</guid><description>&lt;p>&lt;a href="https://github.com/syl20bnr/spacemacs">Spacemacs&lt;/a>结合了Vim和Emacs，而且定制了各种好用的设置，极大地减轻了Emacs的配置负担。推荐使用&lt;code>hybrid&lt;/code>模式，这样浏览代码时可以使用Vim快捷键，进入Insert mode后使用Emacs快捷键。&lt;code>hybrid&lt;/code>模式还有一个好处，编辑时方便汉字输入。Vim模式的先导键是&lt;code>SPC&lt;/code>，在Emacs模式下是&lt;code>M-m&lt;/code>。&lt;/p>
&lt;h2 id="1-vim快捷键记录">1. Vim快捷键记录&lt;/h2>
&lt;p>在Spacemacs中&lt;code>SPC-h-T&lt;/code>进入Emacs Evil快速入门。&lt;/p>
&lt;h3 id="11-移动">1.1 移动&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>h&lt;/code>：前&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>j&lt;/code>：上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>k&lt;/code>：下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>l&lt;/code>：后&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gg&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>文档开始位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>G&lt;/code>：文档结束位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:[number]&lt;/code>：跳转到制定行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-插入和替换">1.2 插入和替换&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>i&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在&lt;strong>光标前&lt;/strong>的位置，进入insert mode，进行编辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ESC&lt;/code>或者&lt;code>C-[&lt;/code>退出insert mode。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>r&lt;/code>：替换&lt;strong>光标所在位置&lt;/strong>的单个字符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>[number] d object&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>cw&lt;/code>或&lt;code>ce&lt;/code>：从光标处删除整个单词，并进入insert mode。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>c$&lt;/code>：从光标处删除整行，并进入insert mode。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="13-搜索和替换">1.3 搜索和替换&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>\&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>\searchWord&lt;/code>：输入搜索内容，&lt;code>n&lt;/code>向下搜索，&lt;code>N&lt;/code>向上搜索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%&lt;/code>：在各种括号跳转。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:s/old/new&lt;/code>：替换第一个匹配；&lt;code>:s/old/new/g&lt;/code>：替换当前行匹配；&lt;code>:#,#s/old/new/g&lt;/code>：替换行（&lt;code>#&lt;/code>为行号）之间匹配；&lt;code>:%s/old/new/g &lt;/code>：替换全文匹配。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:%s/old/new/gc&lt;/code>：替换全文匹配，每一个匹配会提示是否匹配（输入&lt;code>y&lt;/code>表示执行替换，&lt;code>n&lt;/code>表示跳过匹配）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="14-删除剪切和粘贴">1.4 删除、剪切和粘贴&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>x&lt;/code>：删除&lt;strong>光标所在位置&lt;/strong>的单个字符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>[number] d object&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>dw&lt;/code>：从光标处删除整个单词，包括单词后的空格。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>de&lt;/code>：从光标处删除整个单词，不包括空格。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>d$&lt;/code>：从光标处删除整行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dd&lt;/code>：删除光标所在的整行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p&lt;/code>：在&lt;strong>光标后&lt;/strong>的位置粘贴剪切（&lt;code>d&lt;/code>类和&lt;code>x&lt;/code>操作）的内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="15-撤销">1.5 撤销&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>u&lt;/code>：撤销&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ctr-R&lt;/code>：反撤销&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-常用快捷键">2. 常用快捷键&lt;/h2>
&lt;p>常用的快捷键参考使用layer的说明文档。&lt;/p>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2019年11月3日&lt;/p></description></item><item><title>Gibbs取样</title><link>https://YulongNiu.github.io/posts/2015-10-03-gibbs-sampling/</link><pubDate>Sat, 03 Oct 2015 14:37:08 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-10-03-gibbs-sampling/</guid><description>&lt;p>$$
\newcommand{\md}{\mathrm{d}}
$$&lt;/p>
&lt;h2 id="1-gibbs取样简介">1. Gibbs取样简介&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs取样&lt;/a>的核心在于写出多元变量的联合分布，然后根据 $p(X | Y)=\frac{p(X, Y)}{p(Y)}$ 写出各个变量的条件分布，之后使用已有变量样本，依次“抽取-更新”迭代：&lt;/p>
&lt;p>$$
\begin{align*}
\begin{split}
第n次迭代，变量样本为: x^{(n)} = (x_1^{(n)}, x_2^{(n)}, \dots, x_k^{(n)})^T \newline
p(x_1 | x_2^{(n)}, x_3^{(n)}, \dots, x_k^{(n)})抽取变量即为x_1^{(n+1)} \newline
p(x_2 | x_1^{(n+1)}, x_3^{(n)}, \dots, x_k^{(n)})抽取变量即为x_2^{(n+1)} \newline
&amp;amp; \vdots \newline
p(x_k | x_1^{(n+1)}, x_2^{(n+1)}, \dots, x_{k-1}^{(n+1)})抽取变量即为x_k^{(n+1)} \newline
生成新样本: x^{(n+1)} = (x_1^{(n+1)}, x_2^{(n+1)}, \dots, x_k^{(n+1)})^T
\end{split}
\end{align*}
$$&lt;/p>
&lt;p>当抽取足够多次时，计算目标函数$f(x)$的均值：&lt;/p>
&lt;p>$$
\begin{align*}
\begin{split}
f_{mn} = \frac{1}{n-m}\sum_{i = m+1}^{n}f(x^{(i)})
\end{split}
\end{align*}
$$&lt;/p>
&lt;h2 id="2-结合图模型提高抽样效率">2. 结合图模型提高抽样效率&lt;/h2>
&lt;p>在实际应用中，可以结合概率图模型提高抽样效率。具体原理是：对于随机变量$x_1, x_2, \dots, x_n$，条件概率：&lt;/p></description></item><item><title>一些共轭先验</title><link>https://YulongNiu.github.io/posts/2015-08-02-conjugate-priors/</link><pubDate>Sun, 02 Aug 2015 15:53:54 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-08-02-conjugate-priors/</guid><description>&lt;p>$$
\newcommand{\md}{\mathrm{d}}
$$&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Conjugate_prior#cite_note-beta_rate-6">共轭先验（Conjugate prior）&lt;/a>在贝叶斯估计中被广泛应用，本文尝试详细推理一些常见分布的共轭先验。&lt;/p>
&lt;p>贝叶斯公式：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
f(\theta | x) &amp;amp;= \frac{f(\theta, x)}{f(x)} \newline
&amp;amp;= \frac{f(x | \theta)f(\theta)}{\int f(x | \theta)f(\theta) \md \theta}
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;h2 id="1-离散分布">1. 离散分布&lt;/h2>
&lt;h3 id="11-伯努利分布">1.1 伯努利分布&lt;/h3>
&lt;p>伯努利分布（Bernoulli distribution）的概率质量函数为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
f(k;p) = p^k (1-p)^{1-k} \quad \mathrm{for} \quad k \in (0, 1)
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p>
&lt;p>对于随机变量$X_i \in \{X_1, X_2, \dots, X_m\}$易得，$p$的极大似然估计（Maximum Likelihood Estimator, MLE）为$\hat{p}=\frac{\sum_{i=1}^{m}k_i}{m}$。&lt;/p>
&lt;p>该分布的共轭先验为Beta分布$\mathrm{Beta}(\alpha, \beta)$，即对于随机变量$X_i$：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
f(p|X_i) &amp;amp;= \frac{p^{k_i} (1-p)^{1-k_i} \frac{1}{\mathrm{B}(\alpha, \beta)} p^{\alpha - 1} (1-p)^{\beta -1}}{f(X_i)} \newline
&amp;amp;=\frac{\frac{1}{\mathrm{B}(\alpha, \beta)} p^{k_i+\alpha-1}(1-p)^{\beta - k_i}}{\int_0^1 \frac{1}{\mathrm{B}(\alpha, \beta)} p^{k_i+\alpha-1}(1-p)^{\beta - k_i} \md p} \newline
&amp;amp;= \frac{p^{k_i+\alpha-1}(1-p)^{\beta - k_i}}{\mathrm{B}(k_i+\alpha, \beta+1 -k_i)} \newline
&amp;amp;= \mathrm{Beta}(k_i+\alpha, \beta+1-k_i)
\end{split}
\label{eq:3}
\end{align}
$$&lt;/p></description></item><item><title>PostgreSQL使用指南</title><link>https://YulongNiu.github.io/posts/2015-07-29-postgresql-usage/</link><pubDate>Wed, 29 Jul 2015 18:24:10 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-07-29-postgresql-usage/</guid><description>&lt;h2 id="1-查询">1. 查询&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 选取特定的一列或者多列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> column1, column2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 选取全部列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 去除重复，选取一列或多列中唯一元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 如输入多列，则去除多列组合后的重复
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> &lt;span style="color:#00f">DISTINCT&lt;/span> column1, column2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 指定输出列数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- a是输出行数，b是输出起始行（第一行计为0）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> &lt;span style="color:#00f">column&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">LIMIT&lt;/span> a &lt;span style="color:#00f">OFFSET&lt;/span> b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>使用&lt;code>;&lt;/code>结束一条SQL语句，本文中省略；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回未排序数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-排序">2. 排序&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 按照一列或者多列升序排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 可以按照“不查询”的列排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 先按照column2排，再按照column5排
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> column1, column2, column3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">ORDER&lt;/span> &lt;span style="color:#00f">BY&lt;/span> column2, column5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- 降序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">-- DESC只作用于最靠近的唯一一列，即column2，不作用于column5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> column1, column2, column3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">ORDER&lt;/span> &lt;span style="color:#00f">BY&lt;/span> column2 &lt;span style="color:#00f">DESC&lt;/span>, column5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">--使用查询列相对编号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">SELECT&lt;/span> column1, column2, column3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">FROM&lt;/span> dataset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">ORDER&lt;/span> &lt;span style="color:#00f">BY&lt;/span> 2, column5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>使用相对列查询时，不查询的列，比如上述例子的column5，不能用数字代替。&lt;/p></description></item><item><title>Python使用小技巧</title><link>https://YulongNiu.github.io/posts/2015-07-28-python-tips/</link><pubDate>Tue, 28 Jul 2015 14:37:38 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-07-28-python-tips/</guid><description>&lt;p>收集了一些使用Python过程中的小技巧或者常见错误。&lt;/p>
&lt;h2 id="1-whileifbreak">1. While&amp;ndash;if&amp;ndash;break&lt;/h2>
&lt;p>适用情况：&lt;strong>当需要执行一个循环，但是不能事先判断何时终止。&lt;/strong> 可以在循环内部加入判断，符合要求时跳出。比如，使用程序在某个目录下新建一个文件夹，如果文件名已经存在，需要重新生成文件名；否则，创建文件夹。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">import&lt;/span> random, os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">while&lt;/span> &lt;span style="color:#00f">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> letter = [chr(i) &lt;span style="color:#00f">for&lt;/span> i &lt;span style="color:#00f">in&lt;/span> range(97, 123)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> folderName = [random.choice(letter) &lt;span style="color:#00f">for&lt;/span> i &lt;span style="color:#00f">in&lt;/span> range(5)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fn = &lt;span style="color:#a31515">&amp;#39;&amp;#39;&lt;/span>.join(folderName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span> os.path.exists(fn) &lt;span style="color:#00f">is&lt;/span> &lt;span style="color:#00f">not&lt;/span> &lt;span style="color:#00f">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># get an unique name &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> os.mkdir(fn)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">break&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-链式比较操作">2. 链式比较操作&lt;/h2>
&lt;p>Python支持一个链式的比较操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>testNum = 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 链式比较操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 区别if not和if a is not None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">if&lt;/span> (&lt;span style="color:#00f">not&lt;/span> 0 &amp;lt; testNum &amp;lt; 5):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#a31515">&amp;#39;It passed!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考网址">参考网址&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://wiki.python.org/moin/FrontPage">Python Wiki&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.shenwei.me/python-note/#more-3951">Wei Shen&amp;rsquo;s Python note&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.codefrom.com/c/214">十个我希望早点知道的python方法&lt;/a>&lt;/p></description></item><item><title>估计RNA-seq转录本表达量和寻找差异表达基因</title><link>https://YulongNiu.github.io/posts/2015-06-03-quantifing-rna-seq/</link><pubDate>Wed, 03 Jun 2015 16:58:01 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-06-03-quantifing-rna-seq/</guid><description>&lt;h2 id="1-标准化和计数">1. 标准化和计数&lt;/h2>
&lt;h3 id="11-htseq">1.1 HTseq&lt;/h3>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://www-huber.embl.de/users/anders/HTSeq/doc/index.html">HTseq&lt;/a> 是用于Python平台写成的处理高通量测序的平台。&lt;code>htseq-count&lt;/code>可以用来对原始转录本计数，具体计数规则参考&lt;a href="http://www-huber.embl.de/users/anders/HTSeq/doc/count.html">Counting reads in features with htseq-count&lt;/a>。&lt;/p>
&lt;p>&lt;strong>平台&lt;/strong>：Python跨平台使用。&lt;/p>
&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看帮助&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ htseq-count --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 对bam文件按照reads名称排序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools sort -n accepted_filtered.bam accepted_sortname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 注意“=”前后无空格&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ htseq-count --mode=union --stranded=no --type=exon --idattr=gene_id &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span>	 --format=bam accepted_sort.bam hg19USCS_ensembl.gtf &amp;gt; htseqcount_accepted.hsc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>重要参数解释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>--mode&lt;/code>：统计落在某个基因上的reads数目的模型，默认值为“union”（&lt;a href="http://www-huber.embl.de/users/anders/HTSeq/doc/count.html">图示&lt;/a>）。作者认为“union”方法在绝大多数情况下都有很好的表现，建议使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--stranded&lt;/code>：测序方法，默认为“yes”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--type&lt;/code>：计数单元类型，默认为&lt;a href="http://mblab.wustl.edu/GTF22.html">GTF&lt;/a>文件的&lt;code>exon&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--idattr&lt;/code>：计数单元归类，默认为&lt;code>gene_id&lt;/code>。比如把合并汇报多个exon对应的一个gene。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--format&lt;/code>：可以输入bam或者sam文件，bam文件需要制定此参数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>补充&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果输入的是bam文件，bam文件需要按照reads名称排序，操作方法为：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ samtools sort -n accepted_filerted.bam acceted_sortname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12--genomicalignments">1.2 &lt;!-- raw HTML omitted -->GenomicAlignments&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;p>&lt;a href="http://bioconductor.org/packages/release/bioc/html/GenomicAlignments.html">GenomicAlignments&lt;/a>是R/Bioconductor的一个包，其中&lt;code>summarizeOverlaps&lt;/code>函数用于对alignment数据进行计数。&lt;/p>
&lt;h3 id="13-kallisto">1.3 Kallisto&lt;/h3>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://pachterlab.github.io/kallisto/">kallisto&lt;/a>是由&lt;a href="http://pachterlab.github.io/">Lior Pachter小组&lt;/a>开发一款快速测量RNA-seq数据中转录本表达丰度的软件。因为使用了&lt;em>pseudoalignment&lt;/em>的想法，可以不用alignment，直接测量原始测序数据，因此极大提高了运算速度。因为kallisto极高的速度，可以使用&lt;a href="http://en.wikipedia.org/wiki/Bootstrapping_(statistics)">bootstrap&lt;/a>精确估计的“不确定性（uncertainty）”，可以配合下游软件sleuth确定差异表达基因。&lt;/p></description></item><item><title>UCSC Table下载注释文件</title><link>https://YulongNiu.github.io/posts/2015-06-02-download-ucsc-gene-mask/</link><pubDate>Tue, 02 Jun 2015 16:49:41 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-06-02-download-ucsc-gene-mask/</guid><description>&lt;p>在进行RNA-seq数据分析时，需要从&lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables">UCSC Table&lt;/a>下载各种注释信息。比如Cufflinks等要求的转录组注释信息、Cufflinks建议去除的rRNA/tRNA/线粒体组注释。&lt;/p>
&lt;h2 id="1-基因注释信息">1. 基因注释信息&lt;/h2>
&lt;p>下载转录组Ensembl注释文件：&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_ensembl.png" alt="hg19_ensembl.png">&lt;/p>
&lt;p>在“table”选择中，&lt;code>ensemblSource&lt;/code>表示Ensembl类型注释，&lt;code>ensemblToGeneName&lt;/code>表示Ensembl到基因名注释对应。&lt;/p>
&lt;h2 id="2-rrna注释信息">2. rRNA注释信息&lt;/h2>
&lt;p>分为两步：&lt;/p>
&lt;p>第一步， “table”选择&lt;code>wgEncodeGencodeBasicV19&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_rRNA.png" alt="hg19_rRNA.png">&lt;/p>
&lt;p>第二步，按照下图编辑“filter”。&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_rRNA_maskTable.png" alt="hg19_rRNA_maskTable.png">&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_rRNA_mask.png" alt="hg19_rRNA_mask.png">&lt;/p>
&lt;h2 id="3-trna注释信息">3. tRNA注释信息&lt;/h2>
&lt;p>分为两步：&lt;/p>
&lt;p>第一步，“track”选择 &lt;code>tRNA Genes&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_tRNA.png" alt="hg19_tRNA.png">&lt;/p>
&lt;p>第二步，保留pseudo tRNA注释。&lt;/p>
&lt;p>&lt;img src="images/hg19_tRNA_mask.png" alt="hg19_tRNA_mask.png">&lt;/p>
&lt;h2 id="4-线粒体基因组注释">4. 线粒体基因组注释&lt;/h2>
&lt;p>分为两步：&lt;/p>
&lt;p>第一步， “table”选择&lt;code>wgEncodeGencodeBasicV19&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_chrM.png" alt="hg19_chrM.png">&lt;/p>
&lt;p>第二步，按照下图编辑“filter”。&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/hg19_chrM_mask.png" alt="hg19_chrM_mask.png">&lt;/p>
&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>USCS Genome Browser的Google论坛：&lt;a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!topic/genome/IL_aeOuPYU0">1&lt;/a>、&lt;a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!msg/genome/jSAY8w1JVVo/P6lk4OJzDNEJ">2&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一种选择rRNA、tRNA和线粒体组注释的方法&lt;a href="http://onetipperday.blogspot.tw/2012/08/how-to-get-trnarrnamitochondrial-gene.html">How to get tRNA/rRNA/mitochondrial gene GTF file&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://webappl.blogspot.tw/2015/02/extract-rrna-and-trna-features-from.html">Extract rRNA and tRNA features from UCSC Browser&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2015年6月1日&lt;/p></description></item><item><title>SSH建立端口转发</title><link>https://YulongNiu.github.io/posts/2015-05-31-ssh-tunnel/</link><pubDate>Sun, 31 May 2015 21:14:02 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-31-ssh-tunnel/</guid><description>&lt;p>SSH建立端口转发分为两步：&lt;/p>
&lt;h2 id="1-连接远程主机">1. 连接远程主机&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh -NT -D 8080 usrname@host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>-N&lt;/code>表示只连接远程主机，不打开远程shell；&lt;code>-T&lt;/code>表示不分配TTY；&lt;code>-D&lt;/code>表示某端口数据都通过SSH传向远程主机；&lt;code>8080&lt;/code>可以设置为其他端口。&lt;/p>
&lt;h2 id="2-添加chrome浏览器支持">2. 添加Chrome浏览器支持&lt;/h2>
&lt;p>添加&lt;a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm?hl=en">Proxy SwitchySharp插件&lt;/a>，之后在SOCKS host栏目中填入地址&lt;code>127.0.0.1&lt;/code>，端口&lt;code>8080&lt;/code>并启用即可。&lt;/p>
&lt;h3 id="参考网址">参考网址&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.pchou.info/linux/2015/11/01/ssh-tunnel.html">SSH隧道翻墙的原理和实现&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程操作与端口转发&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2017年5月31日&lt;/p></description></item><item><title>Bash简易编程</title><link>https://YulongNiu.github.io/posts/2015-05-28-bash-program/</link><pubDate>Thu, 28 May 2015 21:24:32 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-28-bash-program/</guid><description>&lt;h2 id="1-循环">1. 循环&lt;/h2>
&lt;p>&lt;code>for&lt;/code>循环体&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">for&lt;/span> i in *.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#a31515">&amp;#34;&lt;/span>$i&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-创建数组">2. 创建数组&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>declare -a testArray={&lt;span style="color:#a31515">&amp;#34;element1&amp;#34;&lt;/span> &lt;span style="color:#a31515">&amp;#34;element2&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">${&lt;/span>testArray[0]&lt;span style="color:#a31515">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">for&lt;/span> i in &lt;span style="color:#a31515">&amp;#34;&lt;/span>&lt;span style="color:#a31515">${&lt;/span>testArray[@]&lt;span style="color:#a31515">}&lt;/span>&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#a31515">&amp;#34;&lt;/span>$i&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-字符串分割">3. 字符串分割&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># write in file &amp;#34;testsplit.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IFS=&lt;span style="color:#a31515">&amp;#39;,&amp;#39;&lt;/span> read -ra splitArray &amp;lt;&amp;lt;&amp;lt; &lt;span style="color:#a31515">&amp;#34;This,is,a,test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">for&lt;/span> i in &lt;span style="color:#a31515">&amp;#34;&lt;/span>&lt;span style="color:#a31515">${&lt;/span>splitArray[@]&lt;span style="color:#a31515">}&lt;/span>&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#a31515">&amp;#34;&lt;/span>$i&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bash testsplit.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-屏幕输出存入变量">4. 屏幕输出存入变量&lt;/h2>
&lt;p>某个bash命令，比如&lt;code>ls -l&lt;/code>存入变量，之后引用变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 注意等号前后不能加空格&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>listOutput=&lt;span style="color:#a31515">`&lt;/span>ls -l&lt;span style="color:#a31515">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">&amp;#34;&lt;/span>$listOutput&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-文件末尾添加内容">5. 文件末尾添加内容&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>touch testfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printf &lt;span style="color:#a31515">&amp;#34;hello\n&amp;#34;&lt;/span> &amp;gt; testfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printf &lt;span style="color:#a31515">&amp;#34;world\n&amp;#34;&lt;/span> &amp;gt;&amp;gt; testfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-传入sudo密码">6. 传入sudo密码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">&amp;#34;myPassword&amp;#34;&lt;/span> | sudo -S myCommond
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考网址">参考网址&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash">How do I split a string on a delimiter in Bash?&lt;/a>&lt;/p></description></item><item><title>确定TopHat中mate-inner-dist参数</title><link>https://YulongNiu.github.io/posts/2015-05-23-tophat-inner-distance/</link><pubDate>Sat, 23 May 2015 19:08:19 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-23-tophat-inner-distance/</guid><description>&lt;p>对于双端测序RNA-seq数据，TopHat在运行时候，有两个参数&lt;code>-r/--mate-inner-dist&lt;/code>和&lt;code>--mate-std-dev&lt;/code>分别标识一对reads的间隔长度的期望平均值和标准差，其默认值分别为50bp和20bp。这两个参数本身是个估计值，用于TopHat在map过程中确定一对reads是否匹配到基因组正确位置。如果能够准确设定这两个数值，将会提升TopHat结果的准确性和完整性，参考&lt;a href="http://yulongniu.bionutshell.org/blog/2014/07/23/rna-seq-analysis/">一个例子&lt;/a>。&lt;/p>
&lt;p>有两种方法获得这对参数的准确值：&lt;/p>
&lt;p>第一种：获取RNA-seq实验建库方法，之后按照以下网址说明计算，&lt;a href="http://blog.qiuworld.com:8080/archives/3007">RNA-seq差异表达分析工作流程&lt;/a>。&lt;/p>
&lt;p>第二种：根据RNA-seq数据进行估算，具体步骤为：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用TopHat默认参数先跑一遍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;a href="http://miso.readthedocs.org/en/fastmiso/#computing-the-insert-length-distribution-and-its-statistics">MISO&lt;/a>的&lt;code>pe_utils&lt;/code>工具估算。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以下详细介绍&lt;code>pe_utils&lt;/code>使用方法。&lt;/p>
&lt;p>第一步， 下载对应物种的基因注释文件GTF或者GFF，比如&lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables?command=start">USCS Table Browser&lt;/a>（&lt;code>output format&lt;/code>选择&lt;code>GTF&lt;/code>）或者使用MISO提供的&lt;a href="http://miso.readthedocs.org/en/fastmiso/#human-mouse-gene-models-for-isoform-centric-analyses">Ensembl版本&lt;/a>。如果GTF文件，使用&lt;a href="https://cole-trapnell-lab.github.io/cufflinks/file_formats/">Cufflinks&lt;/a>的&lt;code>gffread&lt;/code>工具进行转换。&lt;/p>
&lt;p>第二步，确定TopHat运行结果的bam文件与基因注释GFF文件，两者基因组命名方法一致。有的使用类似&lt;code>chr1&lt;/code>命名，而另外一些使用&lt;code>1&lt;/code>。如果不一致，建议修改GFF文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看GFF文件中基因组命名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ awk &lt;span style="color:#a31515">&amp;#39;{print $1}&amp;#39;&lt;/span> hg19USCS.gff | sort -n | uniq -c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看bam文件中基因组命名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>samtools view accepted_hits.bam | head -1000 | awk &lt;span style="color:#a31515">&amp;#39;{print $3}&amp;#39;&lt;/span> | sort -n | uniq -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第三步，筛选较长外显子，比如长度大于1000bp。MISO提供了&lt;code>exon_utils&lt;/code>工具用于提取长外显子，但是我们没有能够成功运行过。因此这里提供一个R版本的脚本，比如基因注释文件名为&lt;code>hg19USCS.gff&lt;/code>，输出筛选的文件名为&lt;code>hg19USCS_selected.gff&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gffFile &amp;lt;- read.table(&lt;span style="color:#a31515">&amp;#39;hg19USCS.gff&amp;#39;&lt;/span>, stringsAsFactors = FALSE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gffExon &amp;lt;- gffFile[gffFile[, 3] == &lt;span style="color:#a31515">&amp;#39;exon&amp;#39;&lt;/span>, ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exonLen &amp;lt;- abs(gffExon[, 5] - gffExon[, 4])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gffExonSelect &amp;lt;- gffExon[exonLen &amp;gt;= 1000, ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>write.table(gffExonSelect, &lt;span style="color:#a31515">&amp;#39;hg19USCS_selected.gff&amp;#39;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> row.names = FALSE, col.names = FALSE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> quote = FALSE, sep = &lt;span style="color:#a31515">&amp;#39;\t&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第四步，使用&lt;code>pe_utils&lt;/code>，实例如下：&lt;/p></description></item><item><title>Python打包和上传PyPI</title><link>https://YulongNiu.github.io/posts/2015-05-23-python-pkg/</link><pubDate>Sat, 23 May 2015 01:03:26 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-23-python-pkg/</guid><description>&lt;p>一个简单的Python包创建和上传PyPI流程。&lt;/p>
&lt;h2 id="1-打包">1. 打包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装相关工具&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install --upgrade setuptools wheel twine
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当Python包代码完成后，在根目录下创建&lt;code>setup.py&lt;/code>文件，具体参考&lt;a href="https://github.com/pypa/sampleproject/blob/master/setup.py">sampleproject&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 进入Python包目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 测试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python setup.py test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 打包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python setup.py sdist bdist_wheel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-上传pypi">2. 上传PyPI&lt;/h2>
&lt;p>&lt;a href="https://pypi.org/">PyPI&lt;/a>注册帐号。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 进入Python包目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 上传&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>twine upload dist/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考网址">&lt;!-- raw HTML omitted -->参考网址&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://packaging.python.org/tutorials/packaging-projects/">Packaging Python Projects&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pypi.org/project/twine/">twine package&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2018年6月23日&lt;/p></description></item><item><title>过滤TopHat分析双端测序的输出</title><link>https://YulongNiu.github.io/posts/2015-05-16-filter-tophat2-output/</link><pubDate>Sat, 16 May 2015 04:33:10 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-16-filter-tophat2-output/</guid><description>&lt;h2 id="0-结论">0. 结论&lt;/h2>
&lt;p>在使用TopHat2匹配双端测序结果后，建议根据成对reads的map基因组位置唯一、方向正确和距离合适的标准，筛选得到的匹配结果。比如，TopHat2可能生成&lt;code>accepted_hits.bam&lt;/code>文件，处理方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 首先查看bam文件头部有多少行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view -H accepted_hits.bam | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 筛选成对且成功map到基因组唯一位置的reads，按照上一条输出结果，调整“NR &amp;lt;= 86”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view -h accepted_hits.bam | &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> awk &lt;span style="color:#a31515">&amp;#39;{if (NR &amp;lt;= 86) print $0}; {if($5 == 50 &amp;amp;&amp;amp; ($2 == 163 || $2 == 147 || $2 == 83 || $2 == 99)) print $0}&amp;#39;&lt;/span> | &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> samtools view -b - &amp;gt; accepted_filtered.bam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view accepted_filtered.bam | wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79143942
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1-tophat输出sam文件的第五列">1. TopHat输出sam文件的第五列&lt;/h2>
&lt;p>&lt;a href="http://ccb.jhu.edu/software/tophat/manual.shtml">TopHat文档&lt;/a>没有解释其输出bam文件（比如&lt;code>accepted_hits.bam&lt;/code>）的第五列的意义。按照&lt;a href="http://bowtie-bio.sourceforge.net/bowtie2/index.shtml">Bowtie2&lt;/a>输出结果来看，是表示映射质量指标Mapping Quality scores（MAPQ），具体计算参考公式$\eqref{eq:1}$。&lt;/p></description></item><item><title>Django使用介绍</title><link>https://YulongNiu.github.io/posts/2015-05-09-django-tutorial/</link><pubDate>Sat, 09 May 2015 13:42:15 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-09-django-tutorial/</guid><description>&lt;p>本文是学习&lt;a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">Django Tutorial&lt;/a>的记录，目的为了帮助快速浏览和查找Django使用细节。&lt;/p>
&lt;h2 id="1-安装django">1. 安装Django&lt;/h2>
&lt;p>本文使用&lt;a href="https://www.python.org/">Python 3.3.6&lt;/a>和&lt;a href="http://www.postgresql.org/">PostgreSQL 9.3.6&lt;/a>学习Django。可以参考&lt;a href="http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version/">“使用Pyenv控制多个版本Python”&lt;/a>和 &lt;a href="http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql/">“Fedora安装与使用PostgreSQL”&lt;/a>，安装对应版本Python和PostgreSQL。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 安装Django&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip install django
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 安装PostgreSQL支持psycopg2 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip install psycopg2 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 检查Django版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python -c &lt;span style="color:#a31515">&amp;#34;import django; print(django.get_version())&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-创建项目">2. 创建项目&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 创建名为mysite的项目&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ django-admin startproject mysite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，配制数据库。修改&lt;code>mysite/settings.py&lt;/code>对应位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># https://docs.djangoproject.com/en/1.8/ref/settings/#databases&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DATABASES = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;default&amp;#39;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;ENGINE&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;NAME&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;testdb&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;USER&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;userName&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;PASSWORD&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;passWord&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;HOST&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;/var/run/postgresql&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#39;PORT&amp;#39;&lt;/span>: &lt;span style="color:#a31515">&amp;#39;5432&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 配制好数据库后，链接数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python manage.py migrate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启Django测试网络服务器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python manage.py runserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-创建app">3. 创建app&lt;/h2>
&lt;p>首先， 创建新的app，比如&lt;code>polls&lt;/code>&lt;/p></description></item><item><title>使用Pyenv控制多个版本Python</title><link>https://YulongNiu.github.io/posts/2015-05-09-python-different-version/</link><pubDate>Sat, 09 May 2015 00:14:10 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-09-python-different-version/</guid><description>&lt;p>同时在一台电脑上使用多个版本的Python，可以通过&lt;a href="https://github.com/yyuu/pyenv">pyenv&lt;/a>控制和管理。&lt;/p>
&lt;h2 id="1-安装方法">1. 安装方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 写入路径信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#a31515">&amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#a31515">&amp;#39;export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#a31515">&amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 重新载入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ source ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-安装多个版本python和对应包">2. 安装多个版本Python和对应包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查看可提供的Python版本列表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv install --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装Python所依赖包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install readline readline-devel readline-static openssl openssl-devel openssl-static sqlite-devel bzip2-devel bzip2-libs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装其他版本Python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 如果命令行下载安装Python太慢，可以将下载的安装包放入~/.pyenv/cache/文件夹中，之后安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv install 3.4.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv rehash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 查看已安装Python版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv versions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 全局切换Python版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv global 3.4.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装对应版本Python包。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 每次安装包之后，都要执行rehash。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip install ipython
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv rehash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果在使用&lt;code>pip&lt;/code>安装包时，下载速度过慢，可以考虑使用国内源。比如：&lt;/p></description></item><item><title>Fedora安装与使用PostgreSQL</title><link>https://YulongNiu.github.io/posts/2015-05-08-install-use-postgresql/</link><pubDate>Fri, 08 May 2015 18:30:54 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-05-08-install-use-postgresql/</guid><description>&lt;h2 id="1-安装和开启postgresql">1. 安装和开启postgresql&lt;/h2>
&lt;p>Fedora直接使用&lt;code>dnf&lt;/code>安装相关组件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 安装PostgreSQL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install postgresql postgresql-server postgresql-contrib postgresql-devel pgadmin3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化（只需要执行一次）。如果出现类似&lt;code>Data directory is not empty!&lt;/code>报错，可以尝试执行删除操作&lt;code>rm -f -r /usr/local/pgsql/data&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo postgresql-setup --initdb --unit postgresql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 开启服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo service postgresql start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查询工作状态&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo service postgresql status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 关闭服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo service postgresql stop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 开机启动&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo chkconfig postgresql on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-创建用户和数据库">2. 创建用户和数据库&lt;/h2>
&lt;p>为了方便使用，可以在PostgreSQL中创建一个与当前系统用户名相同的用户，比如目前系统登陆用户为Kitty。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 进入home路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd /home/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 进入默认postgres用户，需要输入root密码。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 之后系统命令提示符会变成类似“bash-4.3$”。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo postgres
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 创建用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># -P：创建用户后立即创建密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># -s：用户为superuser&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># -e：打印消息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-4.3$ createuser -P -s -e Kitty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 创建数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># -O：制定用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-4.3$ createdb -O Kitty testdb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 退出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash-4.3$ exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 再创建新的数据库时，不需要进入postgres。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 直接在当前登录用户下创建即可。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 由于PostgreSQL用户与系统登录用户相同，不需要指定PostgreSQL用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ creatdb testdb2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 删除数据库&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dropdb testdb2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建完用户和对应数据库后，可以登录数据库控制台。登录后，系统命令提示符会变成类似“testdb=#”。&lt;/p></description></item><item><title>C语言学习记录</title><link>https://YulongNiu.github.io/posts/2014-12-07-c-program-note/</link><pubDate>Sun, 07 Dec 2014 18:23:16 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2014-12-07-c-program-note/</guid><description>&lt;h2 id="1-基本数据类型">1. 基本数据类型&lt;/h2>
&lt;h3 id="11-算术类型">1.1 算术类型&lt;/h3>





&lt;table class="table table-responsive table-striped">
 &lt;thead>
 &lt;tr>
 &lt;th>类型&lt;/th>
 &lt;th>解释&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;th>注意事项&lt;/th>
 &lt;th>本地字节数&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>short&lt;/code>&lt;/td>
 &lt;td>有符号短整数&lt;/td>
 &lt;td>完整形式&lt;code>signed short int&lt;/code>，&lt;code>singed&lt;/code>和&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>最左边一位表示符号，&lt;code>0&lt;/code>为正数，&lt;code>1&lt;/code>为负数&lt;/td>
 &lt;td>2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>unsigned short&lt;/code>&lt;/td>
 &lt;td>无符号短整数&lt;/td>
 &lt;td>完整形式&lt;code>unsigned short int&lt;/code>，&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>全部位占满&lt;/td>
 &lt;td>2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>int&lt;/code>&lt;/td>
 &lt;td>有符号整数&lt;/td>
 &lt;td>完整形式&lt;code>signed int&lt;/code>，&lt;code>singed&lt;/code>可以省略&lt;/td>
 &lt;td>最左边一位表示符号，&lt;code>0&lt;/code>为正数，&lt;code>1&lt;/code>为负数&lt;/td>
 &lt;td>4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>unsigned int&lt;/code>&lt;/td>
 &lt;td>无符号整数&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>全部位占满&lt;/td>
 &lt;td>4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>long&lt;/code>&lt;/td>
 &lt;td>有符号长整数&lt;/td>
 &lt;td>完整形式为&lt;code>signed long int&lt;/code>，&lt;code>singed&lt;/code>和&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>最左边一位表示符号，&lt;code>0&lt;/code>为正数，&lt;code>1&lt;/code>为负数&lt;/td>
 &lt;td>8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>unsigned long&lt;/code>&lt;/td>
 &lt;td>无符号长整数&lt;/td>
 &lt;td>完整形式为&lt;code>unsigned short int&lt;/code>，&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>全部位占满&lt;/td>
 &lt;td>8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>long long&lt;/code>&lt;/td>
 &lt;td>无符号长长整数&lt;/td>
 &lt;td>完整形式为&lt;code>signed long long int&lt;/code>，&lt;code>singed&lt;/code>和&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>&lt;!-- raw HTML omitted -->&lt;strong>C99&lt;/strong>&lt;!-- raw HTML omitted -->特有&lt;/td>
 &lt;td>8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>unsigned long long &lt;/code>&lt;/td>
 &lt;td>有符号长长整数&lt;/td>
 &lt;td>完整形式为&lt;code>unsigned long long int&lt;/code>，&lt;code>int&lt;/code>可以省略&lt;/td>
 &lt;td>&lt;!-- raw HTML omitted -->&lt;strong>C99&lt;/strong>&lt;!-- raw HTML omitted -->特有&lt;/td>
 &lt;td>8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>char&lt;/code>&lt;/td>
 &lt;td>字符&lt;/td>
 &lt;td>实质是“小整数”（可能比短整数占用字节更少）&lt;/td>
 &lt;td>分为&lt;code>char&lt;/code>、&lt;code>singed char&lt;/code>和&lt;code>unsigned char&lt;/code>。使用&lt;strong>单引号&lt;/strong>标记常量，比如&lt;code>'A'&lt;/code>（&lt;strong>值&lt;/strong>为65）&lt;/td>
 &lt;td>1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>_Bool&lt;/code>&lt;/td>
 &lt;td>布尔型整数&lt;/td>
 &lt;td>实质是无符号整数&lt;/td>
 &lt;td>只能赋值0或1，赋值&lt;code>_Bool&lt;/code>类型变量为非零值会导致赋值为1&lt;/td>
 &lt;td>1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>float&lt;/code>&lt;/td>
 &lt;td>单精度浮点数&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>double&lt;/code>&lt;/td>
 &lt;td>双精度浮点数&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>long double&lt;/code>&lt;/td>
 &lt;td>扩展精度浮点数&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>16&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
 

&lt;ul>
&lt;li>
&lt;p>强制编辑器处理常量为长整数（十进制、八进制和十六进制），&lt;code>1135L&lt;/code>；强制处理为无符号，&lt;code>1135U&lt;/code>；混合使用，&lt;code>1135UL&lt;/code>，&lt;code>U&lt;/code>和&lt;code>L&lt;/code>顺序和大小写不重要。
&lt;!-- raw HTML omitted -->&lt;strong>C99&lt;/strong>&lt;!-- raw HTML omitted -->中增加了&lt;code>ll&lt;/code>或者&lt;code>LL&lt;/code>后缀，强制&lt;code>long long int&lt;/code>型整数，可以与&lt;code>u&lt;/code>或&lt;code>U&lt;/code>连用。&lt;strong>避免无符号和有符号整数混用，特别是无符号和有符号整数比较，会产生意想不到的后果&lt;/strong>。&lt;/p></description></item><item><title>Emacs配置C语言编程环境</title><link>https://YulongNiu.github.io/posts/2014-12-01-emacs-config-c/</link><pubDate>Mon, 01 Dec 2014 17:36:41 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2014-12-01-emacs-config-c/</guid><description>&lt;p>有很多优秀的C/C++语言IDE用来实现高效的编程，比如&lt;a href="https://www.jetbrains.com/clion/">CLion&lt;/a>。本文介绍在Emacs下配置C/C++编程环境。&lt;/p>
&lt;h2 id="1-安装和基本配置">1. 安装和基本配置&lt;/h2>
&lt;h3 id="11-安装需求">1.1. 安装需求&lt;/h3>
&lt;ul>
&lt;li>安装&lt;a href="http://www.gnu.org/software/global/">GNU Global&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># dnf install global llvm llvm-devel clang* &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装Emacs的&lt;code>helm&lt;/code>、&lt;code>helm-swoop&lt;/code>、&lt;code>helm-gtags&lt;/code>、&lt;code>sr-speedbar&lt;/code>、&lt;code>smartparens&lt;/code>、&lt;code>google-c-style&lt;/code>、&lt;code>auto-complete&lt;/code>、&lt;code>auto-complete-c-headers&lt;/code>、&lt;code>auto-complete-clang&lt;/code>包。&lt;/li>
&lt;/ul>
&lt;h3 id="12-emacs配置">1.2. Emacs配置&lt;/h3>
&lt;p>将&lt;a href="#c-mode-config">附加环境设置&lt;/a>添加到Emacs设置文件，比如&lt;code>~/.emacs&lt;/code>，此环境配置参考&lt;a href="https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el">tuhdo&lt;/a>。&lt;/p>
&lt;h2 id="2-文件操作">2. 文件操作&lt;/h2>
&lt;h3 id="21-查找">2.1. 查找&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>当前buffer查找函数、类的定义&lt;/p>
&lt;ol>
&lt;li>&lt;code>C-c h i&lt;/code>（helm-semantic-or-imenu）：可以输入部分关键词、空格等，以快速搜索。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>当前project查找定义&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>M-.&lt;/code>（helm-gtags-dwim）：输入查找内容。&lt;code>M-,&lt;/code>（tags-loop-continue）：返回上一个buffer。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-j&lt;/code>（helm-gtags-select）：列出当前project所有定义，并且查找。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>查找引用&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>C-c g r&lt;/code>（helm-gtags-find-rtags）：光标停留在函数内部，查找该函数名；如果光标停留在函数名，查找该函数的所有引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c g s&lt;/code>（helm-gtags-find-symbol）：光标停留在变量时的查找。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>查找当前函数引用的函数&lt;/p>
&lt;ol>
&lt;li>&lt;code>C-c g a&lt;/code>（helm-gtags-tags-in-this-function）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>查找文件&lt;/p>
&lt;ol>
&lt;li>&lt;code>C-c g P&lt;/code>（elm-gtags-find-files）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="22-列出源码树">2.2. 列出源码树&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>开启和关闭&lt;/p>
&lt;ol>
&lt;li>&lt;code>M-x sr-speedbar-open RET&lt;/code>：开启。&lt;code>M-x sr-speedbar-close RET&lt;/code>：关闭。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>操作&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>b&lt;/code>和&lt;code>f&lt;/code>切换到当前buffer和所有文件列表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>=&lt;/code>：展开。&lt;code>g&lt;/code>：收回。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>U&lt;/code>：上一级目录。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="23-代码补全">2.3 代码补全&lt;/h3>
&lt;p>代码补全使用&lt;code>auto-complete&lt;/code>、&lt;code>auto-complete-c-headers&lt;/code>、&lt;code>semantic&lt;/code>包。在使用&lt;code>auto-complete-c-headers&lt;/code>自动补全头文件名称时，使用以下命令获得头文件路径：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gcc -xc -E -v -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gcc -xc++ -E -v -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://YulongNiu.github.io/images/emacs_config_c_autocomplete.png" alt="emacs_config_c_autocomplete.png">&lt;/p></description></item><item><title>二代测序中的常用工具介绍</title><link>https://YulongNiu.github.io/posts/2014-07-28-next-seqence-tools/</link><pubDate>Mon, 28 Jul 2014 12:23:42 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-28-next-seqence-tools/</guid><description>&lt;h2 id="1-samtools">1. SAMtools&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://www.htslib.org/">SAMtools&lt;/a>是用于处理SAM (Sequence Alignment/Map)格式文件的一系列工具，主要用来储存大容量的核酸测序结果。BAM是SAM文件的binary格式文件。SAMtools的主要作者是&lt;a href="http://lh3lh3.users.sourceforge.net/">Heng Li&lt;/a>，Heng Li在2012年因为对二代测序领域的贡献获得&lt;a href="http://en.wikipedia.org/wiki/Benjamin_Franklin_Award_(Bioinformatics)">Benjamin Franklin Award&lt;/a>。&lt;/p>
&lt;p>&lt;strong>平台&lt;/strong>：Mac OS/Linux&lt;/p>
&lt;p>&lt;strong>安装&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.htslib.org/download/">下载&lt;/a>SAMtools&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装依赖的Ncurse库&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install ncurses*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>添加SAMtools到PATH（&lt;a href="http://yulongniu.bionutshell.org/blog/2010/11/08/linux-command/">设置参考&lt;/a>）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>快速运行&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># sam格式文件转换为bam格式文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 新版本samtools不用使用-S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view -b samFile &amp;gt; bamFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># bam格式文件转换为sam格式文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view -h bamFile &amp;gt; samFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># bam格式文件转换为sorted bam格式文件，用于长期储存和后续分析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 后一个‘sortedBamFilePrefix’是指需要存储文件名前缀，比如想存储“human_1.bam”，则输入“human_1”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools sort bamFile sortedBamFilePrefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># bam文件按照reads名称排序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools sort -n bamFile sortedBamFilePrefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 直接查看bam文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view bamFile | head -2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 创建bam的index文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools index bamFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 输出alignment数目，配合-f和-F过滤reads&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools view -c bamFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 统计bam文件map数量，可以用于评估mapping的质量。需要输入indexed的bam文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 输出结果每一列分别为参考序列名称、参考序列长度、map上的reads数目、未map上的reads数目&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ samtools idxstats sortedIndexedBamFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>重要参数解释&lt;/strong>：&lt;/p></description></item><item><title>清洗二代测序数据</title><link>https://YulongNiu.github.io/posts/2014-07-28-clean-seq-data/</link><pubDate>Mon, 28 Jul 2014 20:11:18 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-28-clean-seq-data/</guid><description>&lt;h2 id="1-fastqc">1. FastQC&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC&lt;/a>是用于对二代测序数据质量快速检验的工具，可以输入fastq（fastq.gz）、sam或者bam文件。查看&lt;a href="http://www.bioinformatics.nl/courses/RNAseq/FastQC_Manual.pdf">输出结果解释&lt;/a>。&lt;/p>
&lt;p>&lt;strong>平台&lt;/strong>：所有平台。&lt;/p>
&lt;p>&lt;strong>安装&lt;/strong>： 依赖Java，下载后直接安装使用。&lt;/p>
&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 输出分析结果至特定文档&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ fastqc seqFile1 --outdir setFolder1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 支持批量处理测序数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ fastqc seqFile1 seqFile2 seqFileN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看帮助信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ fastqc --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看一共分析了多少个reads，比如fastqc文件为“accepted_filtered_fastqc.zip”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ unzip -p accepted_filtered_fastqc.zip accepted_filtered_fastqc/fastqc_data.txt | &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> sed -n &lt;span style="color:#a31515">&amp;#39;7 p&amp;#39;&lt;/span> | &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> awk &lt;span style="color:#a31515">&amp;#39;{print $3}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-trim-galore">2. Trim Galore!&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://www.bioinformatics.babraham.ac.uk/projects/trim_galore/">Trim Galore!&lt;/a>是对&lt;a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC&lt;/a>和&lt;a href="https://cutadapt.readthedocs.org/en/stable/installation.html">Cutadapt&lt;/a>的包装。可以处理Illumina、Nextera 3和smallRNA测序平台的双端和单端数据，包括去除adapter和低质量reads。&lt;/p>
&lt;p>&lt;strong>平台&lt;/strong>：Linux&lt;/p>
&lt;p>&lt;strong>安装&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>需要先分别安装FastQC和Cutadapt，其中Cutadapt安装使用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># pip install cutadapt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 处理双端测序结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ trim_galore --quality 20 --phred33 --stringency 3 --length 20 --paired &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --gzip --output_dir human_trimgalore &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> mySeq_1_1.fastq.gz mySeq_1_2.fastq.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>重要参数解释&lt;/strong>：&lt;/p></description></item><item><title>二代测序中的短序列比对</title><link>https://YulongNiu.github.io/posts/2014-07-25-short-sequence-alignment/</link><pubDate>Fri, 25 Jul 2014 14:04:25 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-25-short-sequence-alignment/</guid><description>&lt;p>在二代测序数据分析中，非常重要的一步是将测得的短序列“对应”到基因组上。所使用的工具被称为“短序列比对工具（short sequence aligners）”。以下是一些常用工具的介绍。&lt;/p>
&lt;h2 id="1-bowtie">1. Bowtie&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://bowtie-bio.sourceforge.net/">Bowtie2&lt;/a>是现在广泛使用的序列比对工具。&lt;/p>
&lt;p>&lt;strong>运行方式&lt;/strong>：所有平台&lt;/p>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>相比较&lt;a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie1&lt;/a>，处理大于50bp的短序列，速度更快、也更敏感。Bowtie1在处理小于50bp的短序列上，效果更好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://support.illumina.com/sequencing/sequencing_software/igenome.ilmn">iGenomes&lt;/a>提供一些事先编排（index）的基因组。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 建立一系列FASTA文件目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bowtie2-build /filePath/genomeFastaFile indexName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 从已经index文件中提取原始基因组&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bowtie2-inspect indexName &amp;gt; genomeFastaFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># unpaired序列比对&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bowtie2 -p 4 -x indexName -U readFiles -S samFileName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># paired序列比对&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bowtie2 -p 4 -x indexName -1 readFiles1 -2 readFiles2 -S eg2.sam
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-p&lt;/code>：多线程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-x&lt;/code>：之后跟index名称&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-U&lt;/code>：测序文件（比如Fasta，Fastq文件）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-1&lt;/code>/&lt;code>-2&lt;/code>：标识paired文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-S&lt;/code>：SAM格式输出文件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参考网址">参考网址&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://lh3lh3.users.sourceforge.net/NGSalign.shtml">Heng Li总结的工具列表&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>RNA-Seq基本概念和数据分析流程</title><link>https://YulongNiu.github.io/posts/2014-07-22-rna-seq-analysis/</link><pubDate>Tue, 22 Jul 2014 17:03:15 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-22-rna-seq-analysis/</guid><description>&lt;p>RNA-Seq相比较基因芯片，价格虽然昂贵一些，精度和灵敏度更高。同时，在测序深度足够时，也可以检测mRNA选择性剪切类型。&lt;/p>
&lt;h2 id="1-样品制备">1. 样品制备&lt;/h2>
&lt;h2 id="2-测序">2. 测序&lt;/h2>
&lt;p>Illumina双端测序&lt;a href="http://www.illumina.com/technology/next-generation-sequencing/paired-end-sequencing_assay.html">动画&lt;/a>和&lt;a href="http://onetipperday.blogspot.sg/2013/12/illumina-hiseq2000-adapter-and.html">图示&lt;/a>。&lt;/p>
&lt;h2 id="3-分析流程">3. 分析流程&lt;/h2>
&lt;p>RNA-Seq&lt;a href="http://blog.qiuworld.com:8080/archives/2343">主要分析流程&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>原始数据质量评估 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>数据清洗（去除接头和低质量read） --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>清洗数据质量评估 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map测序结果至基因组（转录组） --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map数据质量评估 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>差异表达基因/选择性剪切/新基因/融合基因选择 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GO和pathway分析 --&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>共表达网络分析
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="31-序列清洗">3.1 序列清洗&lt;/h3>
&lt;p>序列清洗主要是去除测序结果中的&lt;a href="http://onetipperday.blogspot.sg/2013/06/illumina-hiseq2000-adapter.html">adapter&lt;/a>或通用引物等。&lt;/p>
&lt;p>以下使用Illumina HiSeq2000平台，对一个人类样本的RNA测序。统计各种序列清洗方法和选择后的reads数目。原始数据两端测序reads分别为54,492,228和54,492,228。&lt;/p>





&lt;table class="table table-responsive table-striped">
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th>#Trimmed&lt;/th>
 &lt;th>#Mapped*&lt;/th>
 &lt;th>#Filtered&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>r50-notrim&lt;/td>
 &lt;td>108,984,456&lt;/td>
 &lt;td>109,278,388&lt;/td>
 &lt;td>79,143,942&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r50-nomixed-notrim&lt;/td>
 &lt;td>108,984,456&lt;/td>
 &lt;td>103,548,800&lt;/td>
 &lt;td>79,143,942&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r50-nomixed-trimmomatic-min20&lt;/td>
 &lt;td>104,164,622&lt;/td>
 &lt;td>116,315,394&lt;/td>
 &lt;td>80,337,256&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r50-nomixed-trimmomatic-min36&lt;/td>
 &lt;td>101,548,172&lt;/td>
 &lt;td>110,778,108&lt;/td>
 &lt;td>79,248,896&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r50-nomixed-trimmomatic-min50&lt;/td>
 &lt;td>98,525,312&lt;/td>
 &lt;td>106,659,988&lt;/td>
 &lt;td>77,779,424&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r50-nomixed-galore-min20&lt;/td>
 &lt;td>107,097,862&lt;/td>
 &lt;td>114,943,386&lt;/td>
 &lt;td>83,039,928&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r100-nomixed-galore-min20&lt;/td>
 &lt;td>107,097,862&lt;/td>
 &lt;td>114,944,672&lt;/td>
 &lt;td>87,899,316&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r165sd45-nomixed-galore-min20&lt;/td>
 &lt;td>107,097,862&lt;/td>
 &lt;td>114,201,366&lt;/td>
 &lt;td>90,750,208&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r165sd45G-nomixed-galore-min20&lt;/td>
 &lt;td>107,097,862&lt;/td>
 &lt;td>109,901,742&lt;/td>
 &lt;td>93,477,122&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r165sd45-nomixed-galore-min50&lt;/td>
 &lt;td>104,869,208&lt;/td>
 &lt;td>109,258,544&lt;/td>
 &lt;td>89,329,672&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>*&lt;/strong>：使用TopHat2把序列mapped到hs19基因组。TopHat2默认设置为，如果一个reads能mapped到多个位点，则都会报道。因此数目可能比原始数据多。&lt;/p></description></item><item><title>Octopress安装和使用</title><link>https://YulongNiu.github.io/posts/2014-07-22-octopress-install/</link><pubDate>Tue, 22 Jul 2014 13:45:46 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-22-octopress-install/</guid><description>&lt;p>安装和使用Octopress的一些注意事项，详细的内容可以&lt;a href="#Ref">参考网址&lt;/a>。&lt;/p>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;p>请参考&lt;a href="http://octopress.org/">官网&lt;/a>，其他的博客介绍的安装已经失效或者错误。
常用命令:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 预览，可自动更新。使用Ctrl+c终止。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rake preview
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-ruby版本调整">2. Ruby版本调整&lt;/h2>
&lt;p>Octopress推荐使用&lt;a href="https://rvm.io/">RVM&lt;/a>安装Ruby 2.2.10版本。在安转过程中可能会出现&lt;code>&amp;quot;gpg: Can't check signature: public key not found&amp;quot;&lt;/code>的错误提示，需要执行一下类似命名，添加公用匙。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下操作设定ruby版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ source ~/.rvm/scripts/rvm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rvm use ruby-2.2.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-预览错误">3. 预览错误&lt;/h2>
&lt;p>如果在预览博文时出现&lt;code>TCPServer Error: Address already in use - bind(2)&lt;/code>的错误，表示端口（Octopress默认4000）被占，解决办法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 获取占据4000端口程序的PID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ lsof -wni tcp:4000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kill -9 PID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-更新博文">4. 更新博文&lt;/h2>
&lt;p>博文放置在&lt;code>source/_posts&lt;/code>目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rake new_post[&lt;span style="color:#a31515">&amp;#34;new post&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git commit -m &lt;span style="color:#a31515">&amp;#34;my comment&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git push origin source
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rake generate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rake deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 或者generate和deploy一步执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rake gen_deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要在首页显示部分博文，在需要隔断的地方（博文markdown文件）加入：&lt;/p></description></item><item><title>TopHat/Cufflinks/CummeRbund使用介绍</title><link>https://YulongNiu.github.io/posts/2014-07-26-tophat-cufflinks-cummerbund/</link><pubDate>Thu, 26 Jun 2014 14:51:56 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2014-07-26-tophat-cufflinks-cummerbund/</guid><description>&lt;p>&lt;a href="http://ccb.jhu.edu/software/tophat/index.shtml">TopHat&lt;/a>、&lt;a href="http://cole-trapnell-lab.github.io/cufflinks/">Cufflinks&lt;/a>和cummeRbund，被称为处理RNA-seq数据的“燕尾服（tuxedo）”。TopHat负责RNA-seq的reads映射比对到基因组，并且自动识别mRNA“内含子-外显子”剪切；Cufflinks擅长组装转录组和寻找差异表达基因（或转录起始位点TSS等）；cummeRbund主攻数据可视化。&lt;/p>
&lt;h2 id="1-tophat">1. Tophat&lt;/h2>
&lt;p>&lt;strong>简介&lt;/strong>：&lt;a href="http://ccb.jhu.edu/software/tophat/index.shtml">TopHat&lt;/a>是快速将RNA测序片段“对应（mapping）”到基因组上的工具，优势在于处理外显子间的剪切。内部首先使用bowtie或bowtie2把RNA测序片段“比对（alignment）”到基因组，之后再分析和鉴定剪切连接区域。&lt;/p>
&lt;p>&lt;strong>平台&lt;/strong>：Mac OS/Linux&lt;/p>
&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 双端测序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tophat2 -p 8 -o human_1 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --mate-inner-dist 165 --mate-std-dev 45 --no-mixed &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> hg19 human_1.fastq.gz human_2.fastq.gz 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 单端测序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tophat2 -p 8 -o human_1 hg19 human_1.fastq.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>重要参数解释&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-p&lt;/code>：设置线程数，用于多核计算。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-o&lt;/code>：执行输入文件夹。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-r/--mate-inner-dist&lt;/code>：一对reads的间隔长度的期望平均值，默认值为50bp，&lt;strong>建议添加&lt;/strong>。具体解释，参考&lt;a href="http://blog.qiuworld.com:8080/archives/3007">RNA-seq差异表达分析工作流程&lt;/a>和&lt;a href="http://www.plob.org/2012/12/04/4988.html">Tophat中-r/–mate-inner-dist参数&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--mate-std-dev&lt;/code>：一对reads的间隔长度分布的标准差，默认值为20bp，&lt;strong>建议添加&lt;/strong>。&lt;code>-r/--mate-inner-dist&lt;/code>和&lt;code>--mate-std-dev&lt;/code>的估计方法参考&lt;a href="http://yulongniu.bionutshell.org/blog/2015/05/23/tophat-inner-distance/">确定TopHat中mate-inner-dist参数&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--library-type&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>测序仪器和方法，默认为标准Illumina平台的&lt;code>fr-unstranded&lt;/code>。其他平台设置，详见&lt;a href="http://ccb.jhu.edu/software/tophat/manual.shtml">TopHat说明文档&lt;/a>、&lt;a href="http://onetipperday.blogspot.sg/2012/07/how-to-tell-which-library-type-to-use.html">How to tell which library type to use (fr-firststrand or fr-secondstrand)?&lt;/a>和&lt;a href="http://www.plob.org/2013/12/03/6731.html">链特异性转录组原理&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果分不清楚&lt;code>fr-firststrand&lt;/code>和&lt;code>fr-secondstrand&lt;/code>，推荐两种方法：&lt;a href="http://ccb.jhu.edu/software/tophat/faq.shtml">第一种&lt;/a>用两个参数试运行一个有1M reads的小样本，之后比较&lt;code>junction.bed&lt;/code>大小；&lt;a href="http://onetipperday.blogspot.sg/2012/07/how-to-tell-which-library-type-to-use.html">第二种&lt;/a>在两个双端测序文件（&lt;code>fastq.gz&lt;/code>）中抽取一些reads，之后&lt;a href="http://genome.ucsc.edu/cgi-bin/hgBlat?org=human">Blat&lt;/a>到USCS genomes上观察。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--no-discordant&lt;/code>：只对于paired reads，只报告concordant mappings。加入这个参数，tophat2在最后一步失败。也可以不加入这个参数，通过sam/bam文件第二列过滤discordant reads，方法参考&lt;a href="http://yulongniu.bionutshell.org/blog/2015/05/16/filter-tophat2-output/">过滤TopHat分析双端测序的输出&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--no-mixed&lt;/code>：只对于paired reads，只报告paired reads都成功map。TopHat默认不加这个参数，即如果对于一个read，如果没有找到alignment的concordant或者discordant mate，那么这一对read将分别寻找和报道各自的alignment。这个参数与&lt;code>--no-discordant&lt;/code>不同，因为加上&lt;code>--no-mixed&lt;/code>也可能报道discordant pairs（例如一对reads都成功alignment，但是方向或者之间距离不对）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-g/--max-multihits&lt;/code>：对于多个map的reads，设定报告数目，默认数值为20。需要注意，尽管这个参数可以设定为1，也不能用于设定唯一map的read。因为某个read有可能map到基因组多个位点，当设定为1时，只会返回得分最高的情况。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>后续操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TopHat2运行后查看&lt;code>align_summary.txt&lt;/code>获得比对结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TopHat2会输出&lt;code>accepted_hits.bam&lt;/code>（接受map的reads文件）和&lt;code>unmapped.bam&lt;/code>（没有map上的reads文件）。对于后者，使用基因组浏览器，如&lt;a href="http://www.broadinstitute.org/igv/">IGV&lt;/a>或者&lt;a href="http://genome.ucsc.edu/">UCSC Genome Browser&lt;/a>大致看下是有无map，之后可以直接丢弃。&lt;/p></description></item><item><title>R使用parallel包并行计算</title><link>https://YulongNiu.github.io/posts/2014-06-24-parallel-package/</link><pubDate>Tue, 24 Jun 2014 22:10:20 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-06-24-parallel-package/</guid><description>&lt;p>最新版本的R已经内置&lt;!-- raw HTML omitted -->parallel&lt;!-- raw HTML omitted -->包，&lt;!-- raw HTML omitted -->parallel&lt;!-- raw HTML omitted -->包是从&lt;!-- raw HTML omitted -->&lt;a href="http://cran.r-project.org/web/packages/snow/index.html">snow&lt;/a>&lt;!-- raw HTML omitted -->包和&lt;!-- raw HTML omitted -->&lt;a href="http://cran.r-project.org/web/packages/multicore/index.html">multicore&lt;/a>&lt;!-- raw HTML omitted -->包继承而来，包含了很多非常好用的函数。&lt;!-- raw HTML omitted -->parallel&lt;!-- raw HTML omitted -->包可以通过PVM（&lt;!-- raw HTML omitted -->rpvm&lt;!-- raw HTML omitted -->包）、MPI（&lt;!-- raw HTML omitted -->&lt;a href="http://cran.r-project.org/web/packages/Rmpi/index.html">Rmpi&lt;/a>&lt;!-- raw HTML omitted -->包）、NetWorkSpaces（&lt;!-- raw HTML omitted -->&lt;a href="http://cran.r-project.org/web/packages/nws/index.html">nws&lt;/a>&lt;!-- raw HTML omitted -->包）和raw sockets（如果以上3种都不能使用）平台进行分布计算，支持cluster和多核个人/服务器计算机。在Linux系统上，通常使用&lt;a href="http://www.open-mpi.org/">openMPI&lt;/a>。&lt;/p>
&lt;h2 id="1-安装rmpi包">1. 安装&lt;!-- raw HTML omitted -->Rmpi&lt;!-- raw HTML omitted -->包&lt;/h2>
&lt;p>因为使用openMPI，所以&lt;!-- raw HTML omitted -->parallel&lt;!-- raw HTML omitted -->包需要&lt;!-- raw HTML omitted -->Rmpi&lt;!-- raw HTML omitted -->包来设定节点，所以首先需要在计算机上安装openMPI。&lt;/p></description></item><item><title>构建和展示进化树软件使用心得</title><link>https://YulongNiu.github.io/posts/2014-05-01-phylo-tool-summary/</link><pubDate>Thu, 01 May 2014 17:13:59 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-05-01-phylo-tool-summary/</guid><description>&lt;h2 id="构建进化树">构建进化树&lt;/h2>
&lt;h3 id="1-phyml">1. PhyML&lt;/h3>
&lt;p>&lt;strong>构建进化树方法&lt;/strong>：Maximum Likelihood&lt;/p>
&lt;p>&lt;strong>评估&lt;/strong>：选择bootstrap或者Likelihood-ratio test&lt;/p>
&lt;p>&lt;strong>运行方式&lt;/strong>：所有平台和&lt;a href="http://atgc.lirmm.fr/phyml/">网页&lt;/a>&lt;/p>
&lt;p>&lt;strong>心得&lt;/strong>：理论上支持4000条序列，小于2000000个字符。但是，对于个人电脑，通常100-200条序列比较合适。命令行运行时，可以选择非常简介的默认模式运行。在默认模式下，bootstrap需要手动开启。安装和使用非常方便，直接下载后可以直接使用。同时，bootstrap可以通过MPI分布计算，但是需要从源代码安装。&lt;/p>
&lt;p>&lt;strong>快速运行&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>phyml -i align_file.phy --no_memory_check
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-i&lt;/code>：后跟需要Phylip格式文件&lt;/li>
&lt;li>&lt;code>--no_memory_check&lt;/code>：不用检查内存，防止程序运行时跳出&lt;/li>
&lt;/ul>
&lt;h3 id="2-raxml">2. RAxML&lt;/h3>
&lt;p>&lt;strong>构建进化树方法&lt;/strong>：Maximum Likelihood&lt;/p>
&lt;p>&lt;strong>运行方式&lt;/strong>：所有&lt;a href="http://www.exelixis-lab.org/">平台&lt;/a>和网页。&lt;/p>
&lt;p>&lt;strong>心得&lt;/strong>：推荐&lt;a href="http://www.phylo.org/portal2/login!input.action">网页运行&lt;/a>，支持数据的存放和其他构建进化树的方法。本地安装支持MPI和PThreads的分布计算，但是安装有些复杂，需要仔细阅读文档。&lt;/p>
&lt;p>&lt;strong>快速运行1&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>raxmlHPC-PTHREADS-AVX -x 12345 -p 12345 -# 100 -m GTRGAMMA -T 4 -s align_file.phy -n TEST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-x&lt;/code>：bootstrap运行时设定随机数，用于结果重现&lt;/li>
&lt;li>&lt;code>-p&lt;/code>：parsimony推断时设定随机数，用于结果重现&lt;/li>
&lt;li>&lt;code>-#&lt;/code>：bootstrap次数。也可以设定为autoMRE，最大次数是1000。&lt;/li>
&lt;li>&lt;code>-m&lt;/code>：设定使用的模型，GTRGAMMA为核苷酸序列适用模型&lt;/li>
&lt;li>&lt;code>-T&lt;/code>：设定线程数，不要超过最大线程&lt;/li>
&lt;li>&lt;code>-s&lt;/code>：输入文件，Phylip或者fasta文件&lt;/li>
&lt;li>&lt;code>-n&lt;/code>：输入文件记号&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>快速运行2&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>raxmlHPC-PTHREADS-AVX -f a -x 12345 -p 12345 -# autoMRE -m GTRCAT -T 4 -s align_file.phy -n TEST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-f a&lt;/code>：选定算法，快速bootstrap&lt;/li>
&lt;/ul>
&lt;h2 id="展示进化树">展示进化树&lt;/h2>
&lt;h3 id="1-itol">1. iTOL&lt;/h3>
&lt;p>&lt;strong>运行方式&lt;/strong>：&lt;a href="http://itol.embl.de/">网页&lt;/a>&lt;/p></description></item><item><title>创建R包的最简流程</title><link>https://YulongNiu.github.io/posts/2014-03-27-creat-r-package/</link><pubDate>Thu, 27 Mar 2014 14:53:05 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-03-27-creat-r-package/</guid><description>&lt;p>一个最简单创建R包的流程。&lt;/p>
&lt;h2 id="1-载入工具包">1. 载入工具包&lt;/h2>
&lt;p>安装并载入&lt;!-- raw HTML omitted -->devtools&lt;!-- raw HTML omitted -->包和&lt;!-- raw HTML omitted -->roxygen2&lt;!-- raw HTML omitted -->包。&lt;!-- raw HTML omitted -->devtools&lt;!-- raw HTML omitted -->包提供了一些包的检查、安装和打包的基本工具。&lt;!-- raw HTML omitted -->roxygen2&lt;!-- raw HTML omitted -->包则使得书写R帮助文档变得轻松简单。如果习惯使用Emacs，可以结合&lt;a href="http://ess.r-project.org/">ESS&lt;/a>建立R包，可以将R代码和帮助文档有效组合在一起，便于管理。当然，也可以使用&lt;a href="http://www.rstudio.com/">Rstudio&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>library(&lt;span style="color:#a31515">&amp;#39;devtools&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library(&lt;span style="color:#a31515">&amp;#39;roxygen2&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-rcpp和相关的包">2. &lt;!-- raw HTML omitted -->Rcpp&lt;!-- raw HTML omitted -->和相关的包&lt;/h2>
&lt;p>如果使用了&lt;!-- raw HTML omitted -->Rcpp&lt;!-- raw HTML omitted -->或者相关的包，比如&lt;!-- raw HTML omitted -->RcppArmadillo&lt;!-- raw HTML omitted -->，需要格外设置。所有cpp代码都写在src文件夹下。&lt;/p>
&lt;p>&lt;strong>首先&lt;/strong>，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>use_rcpp()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>其次&lt;/strong>，在&lt;code>DESCRIPTION&lt;/code>中添加依赖或者需要链接的包名称，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Encoding: UTF-8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Imports:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Rcpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LinkingTo:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Rcpp,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RcppArmadillo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>之后&lt;/strong>，在包的&lt;code>R/&lt;/code>目录下，添加一个文件&lt;code>RcppChk.R&lt;/code>（文件名称自定），并写入：&lt;/p></description></item><item><title>Circos Notes</title><link>https://YulongNiu.github.io/posts/2014-03-17-circos-notes/</link><pubDate>Mon, 17 Mar 2014 15:37:45 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2014-03-17-circos-notes/</guid><description>&lt;p>Mapping data onto a Circos figure requires that you identify what patterns in your data are (a) likely to be important and (b) likely to be present, and create a figure that exposes such patterns. Remember, if the pattern exists, you can&amp;rsquo;t afford to miss it. If it doesn&amp;rsquo;t exist, you can&amp;rsquo;t afford to be fooled into thinking that it&amp;rsquo;s there, or left wondering whether it&amp;rsquo;s occluded by other data.&lt;/p></description></item><item><title>A brief intruction of mutual information and demonstration with R</title><link>https://YulongNiu.github.io/posts/2013-11-10-mutual-information/</link><pubDate>Sun, 10 Nov 2013 01:21:16 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2013-11-10-mutual-information/</guid><description>&lt;p>$\newcommand{\entropfrac}[2]{\frac{#1}{#2} \log \left( \frac{#1}{#2} \right)}$&lt;/p>
&lt;h2 id="mututal-information-mi">Mututal Information (MI)&lt;/h2>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>Mutual Information (MI) is used to measure the distance between two genes vectors, for example $x_1 = {{1, 0, 1, 1, 1, 1, 0}}$ and $y_1 = {{0, 1, 1, 1, 1, 1, 0}}$. It is easily to transfer the two vectors into a binary table:&lt;/p>





&lt;table class="table table-responsive table-striped">
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;strong>X/Y&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>1 (Presence)&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>0 (Absence)&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Sum&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;strong>1(Presence)&lt;/strong>&lt;/td>
 &lt;td>a&lt;/td>
 &lt;td>b&lt;/td>
 &lt;td>a+b&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>0(Absence)&lt;/strong>&lt;/td>
 &lt;td>c&lt;/td>
 &lt;td>d&lt;/td>
 &lt;td>c+d&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>Sum&lt;/strong>&lt;/td>
 &lt;td>a+c&lt;/td>
 &lt;td>b+d&lt;/td>
 &lt;td>n=a+b+c+d&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
 

&lt;p>Typically, here we give the example of two discrete variables, the mutual information between $x_1$ and $y_1$ is&lt;/p></description></item><item><title>R ggplot2 notes</title><link>https://YulongNiu.github.io/posts/2013-10-02-ggplot2-notes/</link><pubDate>Wed, 02 Oct 2013 02:47:11 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2013-10-02-ggplot2-notes/</guid><description>&lt;h1 id="r-package-ggplot2-notes">R Package &lt;!-- raw HTML omitted -->ggplot2&lt;!-- raw HTML omitted --> Notes&lt;/h1>
&lt;h2 id="1-basic-grammar">1. Basic grammar&lt;/h2>
&lt;h3 id="11-plot-types">1.1 Plot types&lt;/h3>
&lt;p>The R package &lt;!-- raw HTML omitted -->ggplot2&lt;!-- raw HTML omitted --> is a famous plot tool for high quality scientific figures. The &lt;!-- raw HTML omitted -->ggplot2&lt;!-- raw HTML omitted --> style figures are widely seen in papers published in high quality journals such as &lt;em>PNAS&lt;/em>, &lt;em>Nature&lt;/em> and &lt;em>Cell&lt;/em>.&lt;/p>
&lt;p>The input data should be in &lt;strong>data frame&lt;/strong> form, and it is easily to use the function &lt;code>as.data.frame()&lt;/code>. &amp;ldquo;&lt;!-- raw HTML omitted -->&lt;strong>+&lt;/strong>&lt;!-- raw HTML omitted -->&amp;rdquo; is used to connect different plot statement. A typical &lt;!-- raw HTML omitted -->ggplot2&lt;!-- raw HTML omitted --> plot statement is like:&lt;/p></description></item><item><title>探索EM算法</title><link>https://YulongNiu.github.io/posts/2013-07-13-em/</link><pubDate>Sat, 13 Jul 2013 19:23:22 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2013-07-13-em/</guid><description>&lt;p>$$
\newcommand{\P}{\mathrm{P}}
$$&lt;/p>
&lt;p>$$
\DeclareMathOperator*{\argmax}{arg\ max\ }
$$&lt;/p>
&lt;p>$$
\newcommand{\Pz}{\P \left( z|y_j, \theta^{(n)} \right)}
$$&lt;/p>
&lt;p>$$
\newcommand{\Pyz}{\P \left( y_j, z|\theta^{(n)} \right)}
$$&lt;/p>
&lt;h2 id="em算法的推出">EM算法的推出&lt;/h2>
&lt;p>考虑观测数据$Y=\{y_1, y_2, \dots, y_m\}$，其中不可观测数据为$Z=\{z_1, z_2, \dots, z_k\}$，需要估计的参数为$\theta=\{\theta_1, \theta_2, \dots, \theta_t\}$。$Z$可以是离散或连续型随机变量，以下过程中假设$Z$为离散型（$Z$为连续型，则全概率公式由求和改为积分）。则观测数据的对数似然函数为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
L(\theta) &amp;amp;= \log\left(\prod_{j=1}^m \P(y_j|\theta)\right) \newline
&amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \P(y_j, z|\theta)\right)
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>为了使$L(\theta)$最大，很容易想到对$\theta$偏导求极值。但有一个困难，即$Z$不可观测，导致的直接后果是对数套求和，计算难度增加。直觉是，&lt;strong>否能找到一个方法，将求和放在对数外面？&lt;/strong> 一个常用的技巧是转化为不等式，&lt;a href="https://en.wikipedia.org/wiki/Jensen%27s_inequality">Jensen&amp;rsquo;s inequality&lt;/a>描述了积分的函数与函数的积分的关系。由于$\log(x)$是凹函数，尝试考察某一次特定的$\theta^{(n)}$取值后，$L(\theta)$与$L(\theta^{(n)})$的差：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
L(\theta) - L(\theta^{(n)}) &amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \P(y_j, z|\theta)\right) - L(\theta^{(n)}) \newline
&amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \Pz \frac{\P(y_j, z|\theta)}{\Pz} \right) - L(\theta^{(n)}) \newline
&amp;amp;\geq \sum_{j=1}^m \sum_{z \in Z} \Pz \log \left( \frac{\P(y_j, z|\theta)}{\Pz} \right) \newline
&amp;amp;- \sum_{j=1}^m \log \left( \P \left( y_j|\theta^{(n)} \right) \right) \left( \sum_{z \in Z} \Pz \right) \newline
&amp;amp;= \sum_{j=1}^m \sum_{z \in Z} \Pz \log\left(\frac{\P(y_j, z|\theta)}{\Pyz} \right)
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p></description></item><item><title>生物信息学工具网址</title><link>https://YulongNiu.github.io/posts/2013-06-18-bioinfor-tools/</link><pubDate>Tue, 18 Jun 2013 16:42:10 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2013-06-18-bioinfor-tools/</guid><description>&lt;h2 id="1-基因组注释信息">1. 基因组注释信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="ftp://ftp.ncbi.nih.gov/genomes/">NCBI ftp 下载基因组&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jcvi.org/cms/home/">Craig Venter Institute&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://useast.ensembl.org/info/data/ftp/index.html">Ensembl&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-进化树">2. 进化树&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>进化树展示&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/List_of_phylogenetic_tree_visualization_software">Wiki software list&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.biostars.org/p/2438/">Biostats总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://itol.embl.de/index.shtml">iTOL&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://ab.inf.uni-tuebingen.de/software/dendroscope/welcome.html">Dendroscope&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>进化树构建&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://sco.h-its.org/exelixis/web/software/raxml/index.html">RAxML&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.atgc-montpellier.fr/phyml/">PhyML&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://evolution.genetics.washington.edu/phylip.html">PHYLIP&lt;/a>，在PHYLIP的&lt;a href="http://evolution.genetics.washington.edu/phylip/general.html">介绍&lt;/a>中，列出了六个高使用率的构建进化树的软件，MrBayes、PAUP*、RAxML、PhyML、MEGA和PHYLIP。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>已知进化树&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://opentreeoflife.org/">Open Tree of Life&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>时间尺度进化树&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.timetree.org/about.php">TimeTree&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>sRNA数据库&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.arb-silva.de/">16S/23S数据库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://greengenes.lbl.gov/cgi-bin/nph-index.cgi">细菌16S数据库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://rdp.cme.msu.edu/index.jsp">真核生物rRNA&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>数据格式转换&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://sco.h-its.org/exelixis/web/software/raxml/index.html">fasta转换为Phylip&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进化树newick和nexus格式转换&lt;/p>
&lt;ol>
&lt;li>R package &lt;!-- raw HTML omitted -->ape&lt;!-- raw HTML omitted -->，提供了函数&lt;code>read.tree()&lt;/code>/&lt;code>write.tree()&lt;/code>，&lt;code>read.nexus()&lt;/code>/&lt;code>read.nexus()&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.phylogeny.fr/version2_cgi/data_converter.cgi">通用格式转换工具&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3-网络可视化">3. 网络可视化&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cytoscape.org/">Cytoscape&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.biolayout.org/">3D网络BioLayout Expression3D&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://visant.bu.edu/">VisAnt&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://circos.ca/">Circos&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="4-序列比对">4. 序列比对&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.clustal.org/">Clustal&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="ftp://ftp.ncbi.nlm.nih.gov/blast/executables/LATEST/">Blast&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&amp;amp;DOC_TYPE=Download">Blast+&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ebi.ac.uk/Tools/msa/">EBI总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mafft.cbrc.jp/alignment/server/">MAFFT&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.drive5.com/muscle/">MUSCLE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.tcoffee.org/">T-Coffee&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.megasoftware.net/">MEGA&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="5-质谱分析">5. 质谱分析&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.thegpm.org/TANDEM/">X!Tandem&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://bacteria.thegpm.org/tandem/thegpm_tandem.html">X!Tandem bacterial&lt;/a>&lt;/p></description></item><item><title>统计学基本知识汇总</title><link>https://YulongNiu.github.io/posts/2013-05-10-primary-statistic/</link><pubDate>Fri, 10 May 2013 00:29:47 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2013-05-10-primary-statistic/</guid><description>&lt;p>$$
\newcommand{\P}{\mathrm{P}}
$$&lt;/p>
&lt;h2 id="1-完备事件">1. 完备事件&lt;/h2>
&lt;p>对于完备事件组$X = \{x_1, x_2, \dots, x_n\}$：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
\P(x_1) + \P(x_2) + \dots + \P(x_n) = 1
\end{split}
\label{eq:1}
\end{align}
$$&lt;/p>
&lt;p>常用的技巧构造乘法系数，例如$\P(Y) = \sum\limits_{i=1}^{n}\P(x_i|\theta)\P(Y)$&lt;/p>
&lt;h2 id="2-全概率公式">2. 全概率公式&lt;/h2>
&lt;p>对于完备事件组$X = \{x_1, x_2, \dots, x_n\}$，事件$Y$的全概率公式：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
\P(Y) &amp;amp;= \P(Y, x_1) + \P(Y, x_2) + \dots + \P(Y, x_n) \newline
&amp;amp;= \P(x_1)\P(Y|x_1) + \P(x_2)\P(Y|x_2) + \dots + \P(x_n)\P(Y|x_n)
\end{split}
\label{eq:2}
\end{align}
$$&lt;/p>
&lt;p>使用概率密度函数表示为：&lt;/p>
&lt;p>$$
\begin{align}
\begin{split}
f(Y) &amp;amp;= \int_{-\infty}^{+\infty}f(Y, x) \mathrm{d}x \newline
&amp;amp;= \int_{-\infty}^{+\infty}f(Y|x)f(x) \mathrm{d}x
\end{split}
\label{eq:3}
\end{align}
$$&lt;/p></description></item><item><title>Python中使用rpy2模块调用R</title><link>https://YulongNiu.github.io/posts/2012-08-21-python-r-rpy2/</link><pubDate>Tue, 21 Aug 2012 19:33:47 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2012-08-21-python-r-rpy2/</guid><description>&lt;p>需要在python中调用R，实在是一种无奈的选择。如果能在一门语言中独立完成课题，是一个比较理想的做法。但是，这种想法也不太现实，毕竟每一种语言都有自己的长处。如果能取长补短，综合使用各种语言，也能起到不错的效果。&lt;/p>
&lt;p>现在遇到的问题是，如何在python中调用R？这其中包括了如何调用R的对象（函数和包），R和python的对象如何互相转换，以及如何调用R的脚本（外界参数的输入）。python提供了一个模块&lt;a href="http://rpy.sourceforge.net/">rpy2&lt;/a> ，可以较好地完成这项工作。rpy2只是提供了一个Python调用R的接口，因此也直接继承了所有R的缺点。一个有意思的项目是&lt;a href="http://www.renjin.org/">renjin&lt;/a>，一个基于JVM的R语言解释器。&lt;/p>
&lt;p>本文着重记录一些使用过程中的注意事项和小技巧，如有不一致则以&lt;a href="http://rpy.sourceforge.net/rpy2/doc-2.5/html/">官方文档&lt;/a>为准。&lt;/p>
&lt;h2 id="1-安装">1. 安装&lt;/h2>
&lt;p>rpy2作为Python的一个模块，其&lt;a href="http://rpy.sourceforge.net/rpy2/doc-2.5/html/overview.html#installation">安装&lt;/a>非常方便。需要做的准备工作是在本地安装好R。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pip install rpy2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-python调用r对象">2. python调用R对象&lt;/h2>
&lt;h3 id="21-使用rpy2robjects">2.1 使用&lt;code>rpy2.robjects&lt;/code>&lt;/h3>
&lt;p>在rpy2中调用R对象，实际上是开启了一个R的交互进程。主要思路是将R的代码写入一个字符串内，之后执行即可。&lt;/p>
&lt;p>对于R代码，将一段R代码写成一行，尽管看起来很丑陋而且不推荐，一样可以执行。但是，反过来，对于Python代码则没有这么简单。因为，Python代码是靠缩进来划分代码的区域，假若一段代码中有两个循环嵌套，如果将代码写成一行，执行起来就要麻烦的多（很可能要依赖空格的多少进行解释）。&lt;/p>
&lt;p>调用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">from&lt;/span> rpy2.robjects &lt;span style="color:#00f">import&lt;/span> r
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有三种方式可以选择：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用&lt;code>r.obj&lt;/code>，比如 &lt;code>r.c(1, 3)&lt;/code>。这种方法虽然方便，但是对于名称中有“点号”的函数会出问题，比如 &lt;code>data.frame&lt;/code>或者 &lt;code>read.csv&lt;/code>等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>r['obj']&lt;/code>，比如 &lt;code>r['c'](1, 3)&lt;/code>。这种方法几乎可以调用任何R的函数，而且写法与原始调用很相似，无非是&lt;code>r['func'](value1, para2 = value2)&lt;/code>。如果一个R函数中的变量名是有“点号”的，不能直接赋值，需要构建一个字典形式，比如 &lt;code>r['func'](value1, para2 = value, **{para.3: value3})&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>r('obj')&lt;/code>，比如 &lt;code>r('c(1, 3)')&lt;/code>。这种方法从某种程度上讲是万能的，因为总是可以将任意长度的R代码写成一个Python字符串，之后通过&lt;code>r('Rcode')&lt;/code>调用执行。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># import r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; &lt;span style="color:#00f">from&lt;/span> rpy2.robjects &lt;span style="color:#00f">import&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># creat an R function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; r(&lt;span style="color:#a31515">&amp;#39;&amp;#39;&amp;#39;f &amp;lt;- function(r){pi * r}&amp;#39;&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; r.f(3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[9.424778]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># internal function in R&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; r[&lt;span style="color:#a31515">&amp;#39;ls&amp;#39;&lt;/span>]()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># two ways of getting &amp;#39;paste&amp;#39; function in R&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># first: direct use R function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; print(r[&lt;span style="color:#a31515">&amp;#39;paste&amp;#39;&lt;/span>](l, collapse = &lt;span style="color:#a31515">&amp;#39;-&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># second: eavl R codes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; coder = &lt;span style="color:#a31515">&amp;#39;paste(&lt;/span>&lt;span style="color:#a31515">%s&lt;/span>&lt;span style="color:#a31515">, collapse = &amp;#34;-&amp;#34;)&amp;#39;&lt;/span> % (l.r_repr())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; print(r(coder))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># call Python function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; l = r[&lt;span style="color:#a31515">&amp;#39;letters&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; len(l)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>26
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; dir(l)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-创建r对象和提取对象的数值">2.2 创建R对象和提取对象的数值&lt;/h3>
&lt;p>创建向量，可以使用&lt;code>rpy2.robjects.vectors&lt;/code>中提供的一系列函数，将一个Python的元组、列表或者字符串转换为R的向量。其中包括 &lt;code>StrVector()&lt;/code>、&lt;code>IntVector()&lt;/code>、&lt;code>FloatVector()&lt;/code>、&lt;code>FactorVector()&lt;/code>和&lt;code>BoolVector()&lt;/code>，分别提供了转换字符、整数、浮点、因子和布尔向量。&lt;/p></description></item><item><title>Emacs配置HTML/JS/CSS编辑环境</title><link>https://YulongNiu.github.io/posts/2012-07-30-emacs-html-css-js/</link><pubDate>Mon, 30 Jul 2012 22:31:13 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2012-07-30-emacs-html-css-js/</guid><description>&lt;p>以下所有Emacs mode都使用&lt;a href="http://yulongniu.bionutshell.org/blog/2012/06/25/emacs-extend-skills/">Emacs包安装系统&lt;/a>。&lt;/p>
&lt;h2 id="1-web-mode">1. web-mode&lt;/h2>
&lt;p>&lt;a href="http://web-mode.org/">web-mode&lt;/a> 提供了很好的wen配件（HTML、JavaScript、CSS、PHP等）的代码缩进、折叠和高亮等出色的功能。&lt;/p>
&lt;p>有用技巧：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>C-c C-n&lt;/code>：放在HTML标签上，在标签间跳转。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-f&lt;/code>：放在HTML标签上，在标签折叠。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-emmet-mode">2. emmet-mode&lt;/h2>
&lt;p>&lt;a href="https://github.com/smihica/emmet-mode">emmet-mode&lt;/a>是&lt;a href="http://emmet.io/">emmet&lt;/a>的Emacs扩展，取代了陈旧的&lt;a href="http://www.emacswiki.org/emacs/ZenCoding">ZenCoding&lt;/a>。只需要输入制定的缩写，这个工具可以自动补全HTML标签。非常方便。&lt;/p>
&lt;p>有用技巧：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>M-x emmet-mode&lt;/code>：打开emmet-mode。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-j&lt;/code>：自动补全。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>补全缩写规律：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>a&lt;/code>：a+href&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>#q&lt;/code>：div+id(q)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.x&lt;/code>：div+class(x)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>#q.x&lt;/code>：div+id(q)+class(x)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="附加内容">附加内容&lt;/h2>
&lt;p>Emacs编程环境设置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;emmet-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(require &lt;span style="color:#a31515">&amp;#39;emmet-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;sgml-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;emmet-mode&lt;/span>) &lt;span style="color:#008000">;; Auto-start on any markup modes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;html-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;emmet-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;web-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;emmet-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;css-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;emmet-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;web-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(require &lt;span style="color:#a31515">&amp;#39;web-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.phtml\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.tpl\\.php\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.[agj]sp\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.as[cp]x\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.erb\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.mustache\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.djhtml\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;auto-mode-alist&lt;/span> &amp;#39;(&lt;span style="color:#a31515">&amp;#34;\\.html?\\&amp;#39;&amp;#34;&lt;/span> . web-mode))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun my-web-mode-hook ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Hooks for Web mode.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq web-mode-markup-indent-offset 2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;web-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;my-web-mode-hook&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="参考资料">参考资料&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://web-mode.org/">web-mode说明文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2015年8月30日&lt;/p></description></item><item><title>Emacs高级使用技巧</title><link>https://YulongNiu.github.io/posts/2012-06-24-emacs-extend-skills/</link><pubDate>Sun, 24 Jun 2012 19:01:36 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2012-06-24-emacs-extend-skills/</guid><description>&lt;h2 id="1-emacs配置文件位置">1. Emacs配置文件位置&lt;/h2>
&lt;p>在Fedora系统下，Emacs的配置文件位置是&lt;code>~/.emacs&lt;/code>。在Emacs配置文件中添加内容后，使用&lt;code>M-x eval-buffer&lt;/code>，使当前配置生效。编译代码以加快加载速度，&lt;code>M-x byte-compile-file&lt;/code>。&lt;/p>
&lt;p>使用Eamcs解释器&lt;code>M-x ielm&lt;/code>。&lt;/p>
&lt;h2 id="2-emacs自带的包管理系统">2. Emacs自带的包管理系统&lt;/h2>
&lt;p>在Emacs24之后，自带包管理系统，使用&lt;code>M-x eval-buffer&lt;/code>进入。可以添加&lt;a href="http://melpa.org/">MELPA源&lt;/a>、&lt;a href="https://marmalade-repo.org/">marmalade源&lt;/a>、&lt;a href="http://elpa.gnu.org/packages/">GNU源&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(require &lt;span style="color:#a31515">&amp;#39;package&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;package-archives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &amp;#39;(&lt;span style="color:#a31515">&amp;#34;melpa&amp;#34;&lt;/span> . &lt;span style="color:#a31515">&amp;#34;http://melpa.milkbox.net/packages/&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-to-list &lt;span style="color:#a31515">&amp;#39;package-archives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &amp;#39;(&lt;span style="color:#a31515">&amp;#34;gnu&amp;#34;&lt;/span> . &lt;span style="color:#a31515">&amp;#34;http://elpa.gnu.org/packages/&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(package-initialize)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样设置之后，就不需要类似&lt;code>(add-to-list 'load-path &amp;quot;~/.emacs.d/elpa/popup-20140207.1702/&amp;quot;)&lt;/code>的语句了，因为Emacs会自动识别安装的包。但是，如果需要对某个包进行进一步设置，需要加上&lt;code>(require 'popup)&lt;/code>之类的语句。&lt;/p>
&lt;h2 id="3-显示行号">3. 显示行号&lt;/h2>
&lt;p>使用&lt;code>M-x linum-mode&lt;/code>添加行号。如果需要永久显示，在Emacs配置文件中添加一下内容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;open linum mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(setq linum-format &lt;span style="color:#a31515">&amp;#34;%4d \u2502&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;prog-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;linum-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(add-hook &lt;span style="color:#a31515">&amp;#39;ess-mode-hook&lt;/span> &lt;span style="color:#a31515">&amp;#39;linum-mode&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-进入shell">4. 进入Shell&lt;/h2>
&lt;p>三种方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>M-x shell&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x ansi-term&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x eshell&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="5-root权限">5. root权限&lt;/h2>
&lt;p>&lt;code>C-x C-f&lt;/code> 之后输入root密码&lt;code>/su:root@usrname password&lt;/code>&lt;/p>
&lt;h2 id="6-移动整体代码块">6. 移动整体代码块&lt;/h2>
&lt;p>选中代码块后：
向左移动2个字符：&lt;code>C-u -2 C-x TAB&lt;/code>
向右移动4个字符：&lt;code>C-u 4 C-x TAB&lt;/code>&lt;/p>
&lt;h2 id="7-添加彩虹猫">7. 添加彩虹猫&lt;/h2>
&lt;p>添加&lt;code>nyan-mode&lt;/code>包，之后在Emacs配置文档中写入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;nyan-mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(nyan-mode t)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-自定义yasnippet模板">8. 自定义YASnippet模板&lt;/h2>
&lt;p>使用&lt;code>M-x yas-new-snippet&lt;/code>，打开一个模板。比如，添加Octopress的语言高亮模板&lt;/p></description></item><item><title>R包制作和roxygen2使用说明</title><link>https://YulongNiu.github.io/posts/2012-05-29-r-package-and-roxygen2/</link><pubDate>Tue, 29 May 2012 19:46:59 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2012-05-29-r-package-and-roxygen2/</guid><description>&lt;p>查看创建R包的各种细节，权威的文献是&lt;a href="http://cran.r-project.org/doc/manuals/r-release/R-exts.html">Writing R Extensions&lt;/a>。&lt;/p>
&lt;h2 id="1-创建r包目录">1. 创建R包目录&lt;/h2>
&lt;p>像盖房子一样，创建R包需要先搭建一个骨架，这个骨架往往是固定的，即一些文件夹（如&lt;code>R&lt;/code>，&lt;code>man&lt;/code>等）和文件（如&lt;code>DESCRIPTION&lt;/code>，&lt;code>NAMESPACE&lt;/code>）是必须的，而另外一些则可选择性添加。一个典型的R包目录,比如&lt;!-- raw HTML omitted -->Biobase&lt;!-- raw HTML omitted -->包，如下图：&lt;/p>
&lt;p>&lt;img src="https://YulongNiu.github.io/images/r_catalog.png" alt="r_catalog">&lt;/p>
&lt;h3 id="11-description文件">1.1 &lt;code>DESCRIPTION&lt;/code>文件&lt;/h3>
&lt;p>一个纯文本ASCII文件，其中Package, Version, License, Description, Title, Author和Maintainer是必备条目，一个例子&lt;!-- raw HTML omitted -->knitr&lt;!-- raw HTML omitted -->包的&lt;code>DESCRIPTION&lt;/code>文件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Package：由字母、数字和“点”构成的，至少含有两个字符，第一个必须是字母，结束不能用“点”（这也是包名称的命名规范）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Version：版本号，经典的命名方式比如0.1-0。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>License：GPL。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Description：一段话描述包主要的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Title：包的一句话解释。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Author和Maintainer：包的作者和维护者，姓+名 （比如Karl Pearson ）。也可以使使用Author@R描述作者，使用R函数&lt;code>person()&lt;/code>，其中变量&lt;code>role&lt;/code>的选项&lt;code>aut&lt;/code>表示author，&lt;code>cre&lt;/code>表示creator（维护者），&lt;code>ctb&lt;/code>表示contributor。一个例子：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>c(person(&lt;span style="color:#a31515">&amp;#34;Hadley&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;Wickham&amp;#34;&lt;/span>, email = &lt;span style="color:#a31515">&amp;#34;hadley@rice.edu&amp;#34;&lt;/span>, role =&lt;span style="color:#a31515">&amp;#34;ctb&amp;#34;&lt;/span>), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person(&lt;span style="color:#a31515">&amp;#34;Yihui&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;Xie&amp;#34;&lt;/span>, email = &lt;span style="color:#a31515">&amp;#34;xie@yihui.name&amp;#34;&lt;/span>, role = c(&lt;span style="color:#a31515">&amp;#34;aut&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;cre&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Date（可选）：当前版本包日期，格式yyyy-mm-dd。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Depends（可选）：依赖的R环境版本和包名称，比如 &lt;code>R (&amp;gt;= 2.14.1)&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;!-- raw HTML omitted -->注意：&lt;!-- raw HTML omitted -->&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>加上版本号，没有版本号等于没用，因为版本之间可能差异很大；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于&lt;!-- raw HTML omitted -->base&lt;!-- raw HTML omitted -->等这样的包就不用写了，因为是必然依赖的，同时也是R启动自动载入的。对于依赖的包名称，在R 2.14.0之后完全没有必要写，因为从这个版本后，所有包都有&lt;code>NAMESPACE&lt;/code>，直接使用&lt;code>Imports&lt;/code>就可以了。&lt;/p></description></item><item><title>R面向对象编程S4</title><link>https://YulongNiu.github.io/posts/2012-05-05-r-s4/</link><pubDate>Sat, 05 May 2012 15:19:36 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2012-05-05-r-s4/</guid><description>&lt;h2 id="1-一些s3的铺垫">1. 一些S3的铺垫&lt;/h2>
&lt;p>在博文“&lt;a href="http://yulongniu.bionutshell.org/blog/2010/09/04/linux-install-r/">Linux安装R语言包&lt;/a>”描述了如何查看一个函数的源代码，其中涉及了例如&lt;code>methods()&lt;/code>函数，用来查看一个S3泛函（S3 generic）的方法。在&lt;!-- raw HTML omitted -->pryr&lt;!-- raw HTML omitted -->包中，提供了更加便捷的查看方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>library(&lt;span style="color:#a31515">&amp;#39;pryr&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## object is base type, S3, S4 or RC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>otype(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## function is genetic or method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ftype(method)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-类">2. 类&lt;/h2>
&lt;h3 id="21-建立新类">2.1 建立新类&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>setClass(Class, representation, prototype, contains=character(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> validity, access, where, version, sealed, package,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S3methods = FALSE, slots)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>Class：类名。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>slots：带名字的列表或者字符向量，名字表示slot，内容表示slot对应的类名。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>contains：父类名，表示继承关系。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>prototype：带名setGroupGeneric字的列表或&lt;code>prototype()&lt;/code>，设定默认值。不建议添加，如果不设定，会自动指定一个符合类型的空值。设定时，要结合&lt;code>validity&lt;/code>定义，因为默认值不会被检查，因为即使不符合&lt;code>validity&lt;/code>定义，也可以通过&lt;code>validObject()&lt;/code>检查。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>validity：函数，检查创建对象是否符合该类要求。建议添加，也可以使用&lt;code>setValidity()&lt;/code>后期添加。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>where：环境（少用）。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>sealed：是否封闭，如果设定为&lt;code>TRUE&lt;/code>，其他&lt;code>setClass()&lt;/code>不能调用该类。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>package：包名（少用）&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>S3methods/representation/access/version：在3.0.0版本后不建议使用。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>例子：&lt;/p></description></item><item><title>R小技巧集锦</title><link>https://YulongNiu.github.io/posts/2012-05-02-r-tricks/</link><pubDate>Wed, 02 May 2012 22:17:02 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2012-05-02-r-tricks/</guid><description>&lt;p>持续更新R语言编程中的一些小技巧，包括一些易错点。但是，需要注意的，&lt;strong>一旦需要使用一些非常稀奇古怪的技巧时，可以尝试反思是否是自己数据结构或者算法出了问题。&lt;/strong>&lt;/p>
&lt;h2 id="1-if爱你else就要和你在一起又要给你一些距离">1. &lt;code>if&lt;/code>爱你，&lt;code>else&lt;/code>就要和你在一起，又要给你一些距离&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">if&lt;/span> (con){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#00f">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expr2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>if...else..&lt;/code>结构中，&lt;code>}&lt;/code>与&lt;code>else&lt;/code>必须在同一行。&lt;/p>
&lt;p>简易形式（不推荐）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># else不能与expr在同一行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">if&lt;/span> (con) expr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">else&lt;/span> expr2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>建议将所有&lt;code>if ... else ...&lt;/code>结构写成第一种形式，如果没有&lt;code>else&lt;/code>，用&lt;code>else {}&lt;/code>代替。&lt;/p>
&lt;h2 id="2-null是空null是气null在r中就是空气">2. &lt;code>NULL&lt;/code>是空，&lt;code>NULL&lt;/code>是气，&lt;code>NULL&lt;/code>在R中就是空气。&lt;/h2>
&lt;p>如果表达式（expression）或者函数（function）的值没有定义，那么将返回&lt;code>NULL&lt;/code>。在R中，&lt;code>NULL&lt;/code>与很多对象合并在一起时，都被忽略掉。比如以下例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># NULL is neglected in vector&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; c(1, &lt;span style="color:#00f">NA&lt;/span>, &lt;span style="color:#00f">NULL&lt;/span>, &lt;span style="color:#00f">FALSE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[1] 1 &lt;span style="color:#00f">NA&lt;/span> 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># also in matrix&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; matrix(c(1, &lt;span style="color:#00f">NA&lt;/span>, &lt;span style="color:#00f">NULL&lt;/span>, 2), c(2, 2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [,1] [,2]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[1,] 1 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[2,] &lt;span style="color:#00f">NA&lt;/span> 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>警告信息：
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>In matrix(c(1, &lt;span style="color:#00f">NA&lt;/span>, &lt;span style="color:#00f">NULL&lt;/span>, 2), c(2, 2)) : 数据长度[3]不是矩阵行数[2]的整倍
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># also in list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; tmp &amp;lt;- list(1, 2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; tmp[1] &amp;lt;- &lt;span style="color:#00f">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[1]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[1] 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; tmp[[1]] &amp;lt;- &lt;span style="color:#00f">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一定要将列表中的某个个元素赋值为NULL，可以使用list(NULL)，比如：&lt;/p></description></item><item><title>Emacs和ESS的使用技巧</title><link>https://YulongNiu.github.io/posts/2011-08-12-emacs-ess-tips/</link><pubDate>Fri, 12 Aug 2011 17:20:57 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2011-08-12-emacs-ess-tips/</guid><description>&lt;h2 id="1-安装ess">1. 安装ESS&lt;/h2>
&lt;p>有两种方法可以安装，一种是直接使用系统自带的包安装系统，比如&lt;code>yum&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install emacs-ess
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，有时可能不是ESS最新版本。所以，推荐第二种方法，使用Emacs自带的包系统，方便更新及时，设置方法&lt;a href="http://yulongniu.bionutshell.org/blog/2012/06/24/emacs-extend-skills/">参考&lt;/a>，安装&lt;code>ess&lt;/code>包。&lt;/p>
&lt;h2 id="2-使用ess">2. 使用ESS&lt;/h2>
&lt;p>进入GNU Emacs界面之后，输入&lt;code>M-X R&lt;/code> 即可进入R界面。在这个过程中，会询问是否在当前运行目录下运行R，可以选择在不同目录下运行。&lt;/p>
&lt;ul>
&lt;li>&lt;code>M-x R&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>启动R。R运行的buffer因为是在Emacs编辑器下运行，所以称为inferior（Emacs文档中称之为iESS buffer）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-u M-x R RET --no-save RET&lt;/code>：启动R并且不保存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x ess-transcript-clean-region&lt;/code>：清理R界面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-z&lt;/code>：强制停止运行的R进程。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>C-c M-o&lt;/code>：清理R console。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-x&lt;/code>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>代替&lt;code>ls()&lt;/code>函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-s&lt;/code>：代替&lt;code>search()&lt;/code>函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-d&lt;/code>：修改已经建立的对象，非常实用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-c C-n&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>把当前行送到R。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-c&lt;/code>：把当前段送到R。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-b&lt;/code>：把当前整个文件送到R。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>C-c tab&lt;/code>：自动补全R代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x o&lt;/code>：滚动屏幕。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C--&lt;/code>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>自动给出R语言中特有的 &lt;code>&amp;lt;-&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C---&lt;/code>：连按两下&amp;ndash;，则可以显示下划线。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-c C-o C-o&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>在函数头按下会激活ESS对R代码的注释功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x customize-group RET ess RET&lt;/code>：配置默认模板，如果需要插入空行，回车没用，猛戳空格。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-o C-c&lt;/code>：将代码注释为roxygen的&lt;code>##'&lt;/code>开头格式，特别是注释example的时候很好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-o p&lt;/code>：光标跳转到注释段落开头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-c C-o n&lt;/code>：光标跳转到注释所在函数段落结尾。&lt;/p></description></item><item><title>Emacs使用汇总</title><link>https://YulongNiu.github.io/posts/2011-08-12-emacs-tips/</link><pubDate>Fri, 12 Aug 2011 14:57:17 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2011-08-12-emacs-tips/</guid><description>&lt;h2 id="1-安装">1. 安装 &lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 安装Emacs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install emacs 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-窗口和文件操作">2. 窗口和文件操作&lt;/h2>
&lt;p>Emacs的按键操作，约定&lt;code>C&lt;/code>代表&lt;code>Ctrl&lt;/code>键，&lt;code>M&lt;/code>代表&lt;code>Alt&lt;/code>键，&lt;code>RET&lt;/code>表示Enter键。&lt;code>C-x&lt;/code>对应字符扩展，比如&lt;code>C-x C-b&lt;/code>表示列出所有buffer；&lt;code>M-x&lt;/code>对应命令扩展，比如&lt;code>M-x replace-string&lt;/code>（可以用TAB补全）表示字符替换。&lt;/p>
&lt;ul>
&lt;li>&lt;code>C-x 2&lt;/code>或&lt;code>C-x 3&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>将窗口分割成两个或者三个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x 1&lt;/code>：只保留一个窗口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x n&lt;/code>：开n个窗口&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-x C-f&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>读入文件，如果没有该文件，则自动创建这个文件，这个命令在mini buffer中呼出路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Emacs minibuffer的路径，在Emacs中可以使用&lt;code>~/&lt;/code>表示当前登录的用户，可以替代&lt;code>/home/usr&lt;/code>。同时，可以在当前路径下直接输入&lt;code>/home//median/TOOL&lt;/code>或者&lt;code>/home//~/&lt;/code>进入需要的目录，因为Emacs会自动忽略&lt;code>//&lt;/code>或者&lt;code>/~&lt;/code>之前的内容（不能在终端使用它）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入/su:root@localhost Mypassword：用以打开root权限文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x ffap&lt;/code>（find-file-at-point）：如果光标停留在一个路径上，可以直接打开这个路径对应目录的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个更加酷的命令是Ido模式（Interactively Do Things），可以实现智能化的交互。打开方式：&lt;code>M-x ido-mode&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>补充Dired文件操作（Directory Editor）&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;code>C-x d&lt;/code>进入Dired buffer下，光标所在处&lt;code>+&lt;/code>新建文件夹。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>f&lt;/code>或&lt;code>e&lt;/code>或者&lt;code>RET&lt;/code>在当前buffer下打开文件。&lt;code>o&lt;/code>在另一个buffer中打开文件，并且光标跳转到另一个buffer。&lt;code>C-o&lt;/code>在另一个buffer下打开文件，光标保留在Dired buffer中。&lt;code>v&lt;/code>在新的buffer打开文件，只读权限。&lt;code>^&lt;/code>在新的buffer打开上层目录的Dired buffer。&lt;code>i&lt;/code>在Dired buffer下打开文件夹。&lt;code>g&lt;/code>更新状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>m&lt;/code>标记文件。&lt;code>%m&lt;/code>标记文件名符合正则规则的文件。&lt;code>%g&lt;/code>标记内容符合正则规则的文件。&lt;code>u&lt;/code>删除当前光标所在文件的标记。&lt;code>M-DEL&lt;/code>删除所有标记的文件。&lt;code>t&lt;/code>标记所有文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以下操作针对标记的文件；如果没有标记的文件，将操作光标所在处文件。&lt;code>C&lt;/code>拷贝文件，&lt;code>R&lt;/code>移动或者重命名文件，&lt;code>H&lt;/code>创建硬链接，&lt;code>C&lt;/code>创建软链接，&lt;code>M&lt;/code>更改文件执行权限（比如777），&lt;code>D&lt;/code>删除文件，&lt;code>Q&lt;/code>正则匹配（所有标记文件）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>d&lt;/code>标记要删除的文件。&lt;code>~&lt;/code>标记所有Emacs备份文件。&lt;code>#&lt;/code>标记所有自动保存文件。&lt;code>%d&lt;/code>标记文件名符合正则表达式的文件，以供删除。&lt;code>x&lt;/code>执行删除操作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-x C-s&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>保存文件，经常使用这个命令存盘，避免文件丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x s&lt;/code>：把所有的buffer存盘。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-x C-w&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>文件另存为。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M-x recover Myfilename&lt;/code> 之后输入文件名和yes：用来恢复自动保存的文件。Emacs自动保存的文件一般以&lt;code>#Myfilename#&lt;/code>来命名。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>C-x C-b&lt;/code>：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>列出所有buffer。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x b&lt;/code>：回到某一个buffer，需要在minibuffer中输入需要跳转的buffer名字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x o&lt;/code>（other）：在不同的buffer间切换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>C-x k&lt;/code>：kill一个buffer。&lt;/p></description></item><item><title>Linux常用命令集锦</title><link>https://YulongNiu.github.io/posts/2010-11-08-linux-command/</link><pubDate>Mon, 08 Nov 2010 18:00:40 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2010-11-08-linux-command/</guid><description>&lt;h2 id="1-压缩与解压缩">1. 压缩与解压缩&lt;/h2>
&lt;p>&lt;code>.tar.gz&lt;/code>格式文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -zxvf /filePath/filename.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 压缩&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -zcvf /filePath/filename.tar.gz /filePath/filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 解压到特定文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -zxvf /filePath/filename.tar.gz -C /filePath/filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 压缩到特定文件夹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -zcvf /filePath/filename.tar.gz -C /filePath/filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 压缩所有txt类型文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gzip *.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.tar.bz2&lt;/code>格式文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -jxvf /filePath/filename.taz.bz2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 压缩&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -jcvf /filePath/filename.tar.bz2 /filePath/filename
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.tar.xz&lt;/code>格式文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 多线程 -T 6为6线程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tar -cvf - /filePath/ | xz -T 6 -c &amp;gt; filename.tar.xz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.rar&lt;/code>格式文件&lt;/p></description></item><item><title>Linux安装R语言包</title><link>https://YulongNiu.github.io/posts/2010-09-04-linux-install-r/</link><pubDate>Sat, 04 Sep 2010 10:21:38 -0400</pubDate><guid>https://YulongNiu.github.io/posts/2010-09-04-linux-install-r/</guid><description>&lt;h2 id="1-r包介绍">1. R包介绍&lt;/h2>
&lt;p>R的包（package）通常有两种:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>二进制代码包（Binary package）：这种包属于即得即用型（ready-to-use），但是依赖与平台，比如Windows和Linux平台下不同。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>源代码包（Source package）: 此类包可以跨平台使用，但用之前需要处理或者编译（compiled）。同时，源代码包可以查看到程序源代码，便于查找、修改和引用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-r包安装">2. R包安装&lt;/h2>
&lt;h3 id="21-源代码安装">2.1 源代码安装&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 需要手动解决包依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ R CMD INSTALL /.../myPackage.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">## 配置R环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ R CMD config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-内置installpackages函数安装">2.2 内置&lt;code>install.packages()&lt;/code>函数安装&lt;/h3>
&lt;p>使用&lt;code>install.packages()&lt;/code>安装，比较简便，联网即可装，装了就可用。使用这种方法安装包时，R会自动安装依赖的包。如果出现安装报错，可能的原因是缺少依赖的系统文件。同时，需要注意的是，一些R包只能在特定的平台上使用。比如&lt;a href="http://www.bioconductor.org/packages/release/bioc/html/Rsubread.html">Rsubread&lt;/a>不能在Windows操作系统下使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>install.packages(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，可以使用&lt;code>install.packages()&lt;/code>安装本地下载的包，尤其适用于在服务器上安装包。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>install.packages(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c(&lt;span style="color:#a31515">&amp;#39;XML_0.99-5.tar.gz&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;../../Interfaces/Perl/RSPerl_0.8-0.tar.gz&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repos = &lt;span style="color:#00f">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configure.args = c(XML = &lt;span style="color:#a31515">&amp;#39;--with-xml-config=xml-config&amp;#39;&lt;/span>, RSPerl = &lt;span style="color:#a31515">&amp;#39;--with-modules= &amp;#34;IO Fcntl&amp;#34;&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当安装包有外部依赖时，可以指定依赖程序的位置。如，安装&lt;code>stringi&lt;/code>包时，提示依赖&lt;code>icu4c&lt;/code>。可以下载&lt;code>icu4c&lt;/code>至指定目录后安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>install.packages(&lt;span style="color:#a31515">&amp;#34;stringi&amp;#34;&lt;/span>, configure.vars=&lt;span style="color:#a31515">&amp;#34;ICUDT_DIR=~/Downloads&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-r包版本查询和更新">3. R包版本查询和更新&lt;/h2>
&lt;p>R和R包版本查询&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 在启动的R中执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>R.version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># R包版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>packageVersion(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查询当前R的详细信息，包括R版本、R包版本、命名空间等&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sessionInfo()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://cran.r-project.org/">CRAN&lt;/a>包更新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 可以定期执行以下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update.packages()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://www.bioconductor.org/">Bioconductor&lt;/a>的安装和更新方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>source(&lt;span style="color:#a31515">&amp;#39;http://bioconductor.org/biocLite.R&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>biocLite(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-卸载r包">4. 卸载R包&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remove.packages(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-r包相关函数">5. R包相关函数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看包的安装目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.libPaths()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看已经安装的包目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看已安装包信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>installed.packages()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 载入myPackage包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>library(myPackage)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>require(myPackage)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看当前载入的包&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>search()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看启动R时自动载入的包。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getOption(&lt;span style="color:#a31515">&amp;#39;defaultPackages&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-帮助信息查询">6. 帮助信息查询&lt;/h2>
&lt;h3 id="61-r和r包帮助信息">6.1 R和R包帮助信息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查询R HOME安装地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sys.getenv(&lt;span style="color:#a31515">&amp;#39;R_HOME&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查询用户HOME地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sys.getenv(&lt;span style="color:#a31515">&amp;#39;HOME&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个“函数”或者“方法”的详细内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>?myFunction
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>?myMethod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 关键词查询&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>??myKeyword
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看已经安装包的详细HTML文档&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>help.start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 搜索R网站上的“helpinfor”相关信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RSiteSearch(&lt;span style="color:#a31515">&amp;#39;helpinputinfor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看“myPackage”的帮助&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>help(package = &lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 有的包，特别是bioconductor的包有vignette，用函数查看&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vignette(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 这个函数也可以查看vignette，更好用一些&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openVignette(&lt;span style="color:#a31515">&amp;#39;myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 展示一些包中demostration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>demo(&lt;span style="color:#a31515">&amp;#39;package&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="62-查询对象信息">6.2 查询对象信息&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看&amp;#34;myPackage&amp;#34;中的所有对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls(&lt;span style="color:#a31515">&amp;#39;package:myPackage&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看函数的参数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>args(myFunction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 自动运行该函数帮助文档中的例子&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example(myFunction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个对象的模式（mode）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mode(myObject)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个对象的属性（attribute）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>attributes(myObject)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 快速查看某个对象的信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 尤其适用于对象有很多行/列&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str(myObject)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个对象的类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>class(myObject)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查询某个中某个类的帮助信息，举例如下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>class?graph::graph
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个S3泛型函数中所有的方法或者一个类中所有的方法（S3：S version 3）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>methods(&lt;span style="color:#a31515">&amp;#39;myMethods&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看S4类的方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>showMethods(class = &lt;span style="color:#a31515">&amp;#39;myClass&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个类或者包的具体内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getClass(&lt;span style="color:#a31515">&amp;#39;class/package&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个类的slot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getSlots(&lt;span style="color:#a31515">&amp;#39;class&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 查看某个对象的slot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>slotNames(myObject)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 访问对象的slot值使用@，可以连续用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Myobject@slotNames
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-查看函数源代码">7. 查看函数源代码&lt;/h2>
&lt;h3 id="71-普通函数源代码">7.1 普通函数源代码&lt;/h3>
&lt;p>直接输入函数名称，不加后面的括号。比如:&lt;/p></description></item><item><title>Linux常用软件集锦</title><link>https://YulongNiu.github.io/posts/2010-07-07-linux-software/</link><pubDate>Wed, 07 Jul 2010 22:09:31 -0500</pubDate><guid>https://YulongNiu.github.io/posts/2010-07-07-linux-software/</guid><description>&lt;p>本文收集了一些好用或者好玩的Linux软件，使用Fedora示例。&lt;/p>
&lt;h2 id="1-添加常用源">1. 添加常用源&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>添加&lt;a href="http://rpmfusion.org/Configuration">rpmfusion&lt;/a>的free和nonfree源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加&lt;a href="http://repo.fdzh.org/">FZUG&lt;/a>源。一个中文Fedora的源和社区，在Fedora下安装中文软件等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-辅助安装工具">2. 辅助安装工具 &lt;/h2>
&lt;ul>
&lt;li>Fedy&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/rpmfusion-infra/fedy">Fedy&lt;/a>是一个辅助在Fedora系统下，更容易安装Skypy、Chrome、Steam等的工具。&lt;/p>
&lt;h2 id="3-影音">3. 影音&lt;/h2>
&lt;ul>
&lt;li>VLC&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install vlc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Mplayer&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install mplayer-gui xine smplayer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>录音工具Audacity&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo dnf install audacity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>屏幕录制RecordMyDesktop&lt;/li>
&lt;/ul>
&lt;p>Linux下有很多录制屏幕的软件，推荐RecordMyDesktop。可以自己选定屏幕区域和大小，也可以把界面缩小到屏幕的下方，变成一个小的按钮，以方便操作。录制的文件为ogv格式，推荐使用VLC打开。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 安装方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo dnf install recordmydesktop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 使用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qt-recordMyDesktop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-办公">4. 办公&lt;/h2>
&lt;ul>
&lt;li>字典GoldenDict&lt;/li>
&lt;/ul>
&lt;p>Linux下曾经风靡一时的字典StarDict，现在有了更加先进和方便的接班人&lt;a href="http://goldendict.org/">GoldenDict&lt;/a> 。GoldenDict的主要特点有：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>字典库丰富;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>直接查询维基百科和其他网络字典;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持字典分类、发音（字典库包括发音）、光标取词等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>安装方法：&lt;/strong>&lt;/p>
&lt;p>参考GoldenDict的&lt;a href="https://github.com/goldendict/goldendict">GitHub安装介绍&lt;/a>，字典发音需要安装Mplayer，Fedora安装可能依赖的库如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># dnf install bzip2-devel gcc-c++ git hunspell-devel \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libvorbis-devel libXtst-devel phonon-devel &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span>qt-devel qtwebkit ffmpeg ffmpeg-devel &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span>lzo lzo-devel eb eb-devel libao libao-devel &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span>qtwebkit-devel libtiff-devel lzma-devel opencc-devel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># 安装字典&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone git://github.com/goldendict/goldendict.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd goldendict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qmake-qt4 &lt;span style="color:#a31515">&amp;#34;CONFIG+=zim_support&amp;#34;&lt;/span> &lt;span style="color:#a31515">&amp;#34;CONFIG+=chinese_conversion_support&amp;#34;&lt;/span> &amp;amp;&amp;amp; make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>添加离线字典&lt;/strong>&lt;/p></description></item></channel></rss>