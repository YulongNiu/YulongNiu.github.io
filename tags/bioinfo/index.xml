<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bioinfo on Yulong Niu</title>
    <link>https://YulongNiu.github.io/tags/bioinfo/</link>
    <description>Recent content in bioinfo on Yulong Niu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Mon, 15 Apr 2019 14:58:58 +0200</lastBuildDate>
    
	<atom:link href="https://YulongNiu.github.io/tags/bioinfo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DESeq2包的对比组设计</title>
      <link>https://YulongNiu.github.io/posts/2019-04-15-deseq2-design/</link>
      <pubDate>Mon, 15 Apr 2019 14:58:58 +0200</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2019-04-15-deseq2-design/</guid>
      <description>1. 两两比对 DataFrame with 12 rows and 2 columns condition genotype &amp;lt;factor&amp;gt; &amp;lt;factor&amp;gt; sample1 A I sample2 A I sample3 A I sample4 A II sample5 A II ... ... ... sample8 B I sample9 B I sample10 B II sample11 B II sample12 B II 组A vs. 组B。
dds &amp;lt;- makeExampleDESeqDataSet(n = 100, m = 12) dds$genotype &amp;lt;- factor(rep(rep(c(&amp;#39;I&amp;#39;, &amp;#39;II&amp;#39;), each=3), 2)) ## condition: A vs. B design(dds) &amp;lt;- ~ condition ddres &amp;lt;- DESeq(dds) res &amp;lt;- results(ddres, contrast = c(&amp;#39;condition&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;)) ## genotype I vs.</description>
    </item>
    
    <item>
      <title>通过RNA-Seq评估基因表达量的模型</title>
      <link>https://YulongNiu.github.io/posts/2018-02-17-estimate-rna-seq/</link>
      <pubDate>Sat, 17 Feb 2018 18:23:29 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2018-02-17-estimate-rna-seq/</guid>
      <description>$$ \newcommand{\tildel}{\widetilde{l_t}} $$
$$ \newcommand{\P}{\mathrm{P}} $$
$$ \DeclareMathOperator*{\argmax}{arg\,max} $$
本文基于参考资料1，展示RNA-Seq在评估基因表达量模型的细节。
1. 符号表示 $K$个长度为$l_i$的转录序列$t_i$，构成转录本的集合$T=\{t_1, t_2, \dots, t_K\}$。单个转录组中，每个转录序列$t_i$有$c_i$个拷贝数，全部转录序列的总拷贝数为$M$。单个转录序列的相对丰度为$\rho_k=\frac{c_k}{\sum\limits_{t \in T} c_t} = \frac{c_k}{M}$，易得$\sum\limits_{k=1}^K \rho_k=1$。
单个转录组中，全部转录片段构成集合$F=\{f_1, f_2, \dots, f_N\}$，总转录片段数目为$N=|F|$。比对到的转录序列$t_i$上的转录片段，构成集合$F_t \in F$，对应的转录片段数目为$X_t=|F_t|$。
2. 简单模型 简单模型为：单端RNA-Seq，每一个read只比对到一个转录序列上，且每个read的长度都为定值$m$。对于转录序列$t_i$，从5&#39;到3&#39;一共可能比对上的read数目为$\tildel = l_i - m + 1$。建立模型的思路是：当给定一个read，它会被比对到某个转录序列的某个位置是一个随机事件。通过实际观测（即将read比对到转录序列），进而估计未知参数$\rho = \{\rho_1, \rho_2, \dots, \rho_K\}$。
通过read序列比对，可得观测数据类似如下矩阵。每一行表示某个read是否比对到某个转录序列的某个位置，行和为1。$1$表示read比对到对应转录序列上，$0$表示没有比对到对应转录序列。
$$ \left[ \begin{matrix} 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1 \newline 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \newline \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \newline 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1 \newline \end{matrix} \right] $$</description>
    </item>
    
    <item>
      <title>Bray-Curtis distance解释</title>
      <link>https://YulongNiu.github.io/posts/2017-10-24-bray-curtis-distance/</link>
      <pubDate>Tue, 24 Oct 2017 12:26:00 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2017-10-24-bray-curtis-distance/</guid>
      <description>$$ \newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1} $$
Bray-Curtis distance（BCD）的定义为：
$$ \begin{align} \begin{split} BCD(X, Y) = \frac{\sumup{|x_i - y_j|}}{\sumup{x_i} + \sumup{y_i}} \end{split} \label{eq:1} \end{align} $$
其中，$X$和$Y$分别为长度为$n$的数值向量。根据$\eqref{eq:1}$可以得出：$BCD$的取值范围为$[0, 1]$；当$X$和$Y$完全相同时，$BCD$为0；反之，$BCD$为1。
同样，Bray-Curtis similarity（BCS）或Bray-Curtis index为：
$$ \begin{align} \begin{split} BCS(X, Y) = 1 - BCD(X, Y) \end{split} \label{eq:2} \end{align} $$
参考资料  Chapter 6 Measures of distance and correlation between variables  更新记录 2017年10月22日</description>
    </item>
    
    <item>
      <title>Normalized Google distance解释</title>
      <link>https://YulongNiu.github.io/posts/2017-10-22-google-distance/</link>
      <pubDate>Sun, 22 Oct 2017 21:35:30 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2017-10-22-google-distance/</guid>
      <description>$$ \newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1} $$
本文尝试探索Normalized Google distance（简称NGD）的定义和拓展应用。
1. NGD原始定义 维基百科的定义为：
$$ \begin{align} \begin{split} NGD(x, y) = \frac{\max{\log f(x), \log f(y)} - \log f(x, y)}{\log N - \min{\log f(x), \log f(y)}} \end{split} \label{eq:1} \end{align} $$
其中，$f(x)$和$f(y)$分别为关键词$x$和$y$出现的次数，$f(x,y)$为$x$和$y$同时出现的次数，$N$为全部搜索单词数目。根据$\eqref{eq:1}$可以得出：如果$x$和$y$几乎总是同时出现时，$NGD$趋近于$0$；如果$x$和$y$出现的次数很少，即$\log f(x,y)$趋近于负无穷，则$NGD$可能大于$1$。
2. NGD定义延伸 Choi and Rashid在2008年的文章提出一种针对向量的$NGD$定义：
$$ \begin{align} \begin{split} NGD(X, Y) &amp;amp;= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\sumup{x_i} + \sumup{y_i} - \sumup{\min(x_i, y_i)}} \newline &amp;amp;= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\max\left\{\sumup{x_i}, \sumup{y_i}\right\}} \end{split} \label{eq:2} \end{align} $$</description>
    </item>
    
    <item>
      <title>最大熵模型</title>
      <link>https://YulongNiu.github.io/posts/2017-10-16-max-entropy/</link>
      <pubDate>Mon, 16 Oct 2017 13:16:12 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2017-10-16-max-entropy/</guid>
      <description>1. 熵和条件熵 对于随机变量$X$，熵为：
$$ \begin{align} \begin{split} H(X) = -\sum_{x \in X}p(x)\log{p(x)} \end{split} \label{eq:1} \end{align} $$
其中：
$$ \begin{align} \begin{split} \sum_{x \in X}p(x) = 1 \end{split} \label{eq:2} \end{align} $$
同样道理，对于任意随机变量$X$和$Y$，联合熵为：
$$ \begin{align} \begin{split} H(X,Y) = -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} \end{split} \label{eq:3} \end{align} $$
基于$X$的$Y$的熵为条件熵：
$$ \begin{align} \begin{split} H(Y|X) &amp;amp;= H(X, Y) - H(X) \newline &amp;amp;= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X}p(x)\log{p(x)} \newline &amp;amp;= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X, y \in Y}p(x, y)\log{p(x)} \newline &amp;amp;= -\sum_{x \in X, y \in Y}p(x, y)\log \frac{p(x, y)}{p(x)} \end{split} \label{eq:4} \end{align} $$</description>
    </item>
    
    <item>
      <title>朴素贝叶斯分类器应用于二元数据类型</title>
      <link>https://YulongNiu.github.io/posts/2017-10-15-naive-bayes-binary-multinomial/</link>
      <pubDate>Sun, 15 Oct 2017 17:38:16 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2017-10-15-naive-bayes-binary-multinomial/</guid>
      <description>1. 贝叶斯定理 已知事件$A$和$B$，则条件概率为：
$$ \begin{align} \begin{split} P(A | B) &amp;amp;= \frac{P(A,B)}{P(B)} \newline P(B | A) &amp;amp;= \frac{P(A,B)}{P(A)} \end{split} \label{eq:1} \end{align} $$
可以推导出：
$$ \begin{align} P(B|A) = \frac{P(A|B)P(B)}{P(A)} \label{eq:2} \end{align} $$
2. 分类器简介 朴素贝叶斯分类器（Naive Bayes classifier）是一种简单、有效的分类器，其难点在于估算条件概率。比如，一个数据集拥有$N$个相互独立的特征，$C$个分组，对于$C_j$条件概率模型为：
$$ \begin{align} \begin{split} p(C_j|F_1,\cdots,F_n) &amp;amp;= \frac{p(F_1,\cdots,F_n|C_j)p(C_j)}{p(F_1,\cdots,F_n)} \newline &amp;amp;= p(F_1|C_j) \cdots p(F_n|C_j)p(C_j)(1/p(F_1,\cdots,F_n)) \end{split} \label{eq:3} \end{align} $$
由于$1/p(F_1,\cdots,F_n)$在不同分组中为定值，因此：
$$ \begin{align} \begin{split} p(C_j|F_1,\cdots,F_n) &amp;amp;\propto p(C_j)\prod_{i=1}^{N}p(F_i|C_j) \end{split} \label{eq:4} \end{align} $$
其中，$p(C_j)$通常容易求得，即$C_j$分组在测试数据集中出现的频率。而$p(F_i\ \vert C_j)$则根据不同的测试数据类型，有不同的估计值。
以下讨论两种二元数据类型，例如某个数据集有三种特征量：
$$ F = \left[ \begin{array}{f} F_1 \newline F_2 \newline F_3 \end{array} \right] $$</description>
    </item>
    
    <item>
      <title>如何在Nature communications上发表文章</title>
      <link>https://YulongNiu.github.io/posts/2016-09-22-how-to-publish-in-nc/</link>
      <pubDate>Thu, 22 Sep 2016 16:25:13 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2016-09-22-how-to-publish-in-nc/</guid>
      <description>我最近看到一个幻灯片，主要讲了在Nature Communications（NC）上发表文章的建议，作者是NC的副主编Nicky Dean。整个幻灯片一种轻松幽默的口吻，讲述了投稿和发表文章过程的各种问题，并提出了针对性建议，值得推荐。以下记录一些关键信息。
投稿前注意事项  Nature杂志（可能此处也指NC）只考虑有重大创新（conceptually novel）的工作，而不是补充完善数据类型研究。
 不要有快速发表的想法。
 不介意会议报告或者预印服务网站发表。
 介意发表在出版的会议录（conference proceedings）或者其他大规模传播的媒介上。
  准备充分  问问自己这个研究适合于本领域的哪些地方？这个研究是否有显著的进步？
 从一开始就好好准备文稿，比如文稿有清晰的结构、容易理解，并且能够传达出最主要信息。
 阅读《作者须知》，使得文稿符合杂志的要求。
  准备cover letters  解释工作的创新，但不要过了。
 推荐审稿人，但不能都是自己的熟人。
 可以推荐需要屏蔽的审稿人。
 明确一切相关的正在发表或者已经投稿的文章。
  文章要素  解释清楚研究领域背景，即回答“我们为什么要重视这项研究？”
 清晰地描述做了什么工作。
 连接研究内容和领域背景，以说服别人这项研究确实有重大突破。
 发表文章的目的是为了更有效地交流，而不是显示自己有聪明!
  NC编辑审核常规要点  研究的创新性。
 支持数据。
 作者或者他人之前的研究。
 参考文献是否完成，是否重大遗漏。
  应对审稿人意见  如果被邀请重新提交文章，确保文章解决了所有审稿人提出的问题。
 如果被要求进一步实验，不要尝试规避。
 保持专业，不要使用侮辱性语言、自大或者恐吓。
 审稿人也可能会犯错，并且记住他们是自己同行专家。不管怎样，以后大家还是要一起打交道。
  更新记录 2016年9月22日</description>
    </item>
    
    <item>
      <title>HISAT2使用问答</title>
      <link>https://YulongNiu.github.io/posts/2016-09-10-hisat2-faq/</link>
      <pubDate>Sat, 10 Sep 2016 16:32:47 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2016-09-10-hisat2-faq/</guid>
      <description>HISAT2是一款用于“对应（map）”二代测序数据（全基因组、转录组和外显子组）至目标基因组的工具，用来替代HISAT和TopHat2。本文汇集一些使用HISAT2的常见问题问答。
如何解读HISAT2的输出统计？ 一个常见的双端测序样本HISAT2输出统计：
10000 reads; of these: 10000 (100.00%) were paired; of these: 650 (6.50%) aligned concordantly 0 times 8823 (88.23%) aligned concordantly exactly 1 time 527 (5.27%) aligned concordantly &amp;gt;1 times ---- 650 pairs aligned concordantly 0 times; of these: 34 (5.23%) aligned discordantly 1 time ---- 616 pairs aligned 0 times concordantly or discordantly; of these: 1232 mates make up the pairs; of these: 660 (53.57%) aligned 0 times 571 (46.</description>
    </item>
    
    <item>
      <title>常用参考基因组下载地址</title>
      <link>https://YulongNiu.github.io/posts/2016-09-10-reference-genome-location/</link>
      <pubDate>Sat, 10 Sep 2016 13:17:00 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2016-09-10-reference-genome-location/</guid>
      <description>本文收集了一些常用参考基因组的下载网址和补充说明。
 NCBI genome
 Ensembl FTP
 UCSC FTP：cytoband文件可能含有gneg等标识，其中acen表示着丝粒区域、stalk表示近端着丝粒区域、gvar表示异染色质，例如臂间或端粒区域。
 GENCODE：只有人和大鼠，注释较好。
 iGenomes：部分模式生物bowtie、bowtie2和BWA索引基因组。
 HISAT2：部分模式生物HISAT2索引基因组。
  更新记录 2018年8月6日</description>
    </item>
    
    <item>
      <title>一些共轭先验</title>
      <link>https://YulongNiu.github.io/posts/2015-08-02-conjugate-priors/</link>
      <pubDate>Sun, 02 Aug 2015 15:53:54 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-08-02-conjugate-priors/</guid>
      <description>$$ \newcommand{\md}{\mathrm{d}} $$
共轭先验（Conjugate prior）在贝叶斯估计中被广泛应用，本文尝试详细推理一些常见分布的共轭先验证。
贝叶斯公式：
$$ \begin{align} \begin{split} f(\theta | x) &amp;amp;= \frac{f(\theta, x)}{f(x)} \newline &amp;amp;= \frac{f(x | \theta)f(\theta)}{\int f(x | \theta)f(\theta) \md \theta} \end{split} \label{eq:1} \end{align} $$
1. 离散分布 1.1 伯努利分布 伯努利分布（Bernoulli distribution）的概率质量函数为：
$$ \begin{align} \begin{split} f(k;p) = p^k (1-p)^{1-k} \quad \mathrm{for} \quad k \in {0, 1} \end{split} \label{eq:2} \end{align} $$
对于随机变量$X_i \in \{X_1, X_2, \dots, X_m\}$易得，$p$的极大似然估计（Maximum Likelihood Estimator, MLE）为$\hat{p}=\frac{\sum_{i=1}^{m}k_i}{m}$。
该分布的共轭先验为Beta分布$\mathrm{Beta}(\alpha, \beta)$，即对于随机变量$X_i$：
$$ \begin{align} \begin{split} f(p|X_i) &amp;amp;= \frac{p^{k_i} (1-p)^{1-k_i} \frac{1}{\mathrm{B}(\alpha, \beta)} p^{\alpha - 1} (1-p)^{\beta -1}}{f(X_i)} \newline &amp;amp;=\frac{\frac{1}{\mathrm{B}(\alpha, \beta)} p^{k_i+\alpha-1}(1-p)^{\beta - k_i}}{\int_0^1 \frac{1}{\mathrm{B}(\alpha, \beta)} p^{k_i+\alpha-1}(1-p)^{\beta - k_i} \md p} \newline &amp;amp;= \frac{p^{k_i+\alpha-1}(1-p)^{\beta - k_i}}{\mathrm{B}(k_i+\alpha, \beta+1 -k_i)} \newline &amp;amp;= \mathrm{Beta}(k_i+\alpha, \beta+1-k_i) \end{split} \label{eq:3} \end{align} $$</description>
    </item>
    
    <item>
      <title>PostgreSQL使用指南</title>
      <link>https://YulongNiu.github.io/posts/2015-07-29-postgresql-usage/</link>
      <pubDate>Wed, 29 Jul 2015 18:24:10 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-07-29-postgresql-usage/</guid>
      <description>1. 查询 -- 选取特定的一列或者多列 SELECT column1, column2 FROM dataset -- 选取全部列 SELECT * FROM dataset -- 去除重复，选取一列或多列中唯一元素 -- 如输入多列，则去除多列组合后的重复 SELECT DISTINCT column1, column2 FROM dataset -- 指定输出列数 -- a是输出行数，b是输出起始行（第一行计为0） SELECT column FROM dataset LIMIT a OFFSET b  使用;结束一条SQL语句，本文中省略；
 返回未排序数据；
  2. 排序 -- 按照一列或者多列升序排序 -- 可以按照“不查询”的列排序 -- 先按照column2排，再按照column5排 SELECT column1, column2, column3 FROM dataset ORDER BY column2, column5 -- 降序 -- DESC只作用于最靠近的唯一一列，即column2，不作用于column5 SELECT column1, column2, column3 FROM dataset ORDER BY column2 DESC, column5 --使用查询列相对编号 SELECT column1, column2, column3 FROM dataset ORDER BY 2, column5  使用相对列查询时，不查询的列，比如上述例子的column5，不能用数字代替。</description>
    </item>
    
    <item>
      <title>估计RNA-seq转录本表达量和寻找差异表达基因</title>
      <link>https://YulongNiu.github.io/posts/2015-06-03-quantifing-rna-seq/</link>
      <pubDate>Wed, 03 Jun 2015 16:58:01 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-06-03-quantifing-rna-seq/</guid>
      <description>1. 标准化和计数 1.1 HTseq 简介：HTseq 是用于Python平台写成的处理高通量测序的平台。htseq-count可以用来对原始转录本计数，具体计数规则参考Counting reads in features with htseq-count。
平台：Python跨平台使用。
快速运行：
# 查看帮助 $ htseq-count --help # 对bam文件按照reads名称排序 $ samtools sort -n accepted_filtered.bam accepted_sortname # 注意“=”前后无空格 $ htseq-count --mode=union --stranded=no --type=exon --idattr=gene_id \ 	--format=bam accepted_sort.bam hg19USCS_ensembl.gtf &amp;gt; htseqcount_accepted.hsc 重要参数解释：
 --mode：统计落在某个基因上的reads数目的模型，默认值为“union”（图示）。作者认为“union”方法在绝大多数情况下都有很好的表现，建议使用。
 --stranded：测序方法，默认为“yes”。
 --type：计数单元类型，默认为GTF文件的exon。
 --idattr：计数单元归类，默认为gene_id。比如把合并汇报多个exon对应的一个gene。
 --format：可以输入bam或者sam文件，bam文件需要制定此参数。
  补充：
 如果输入的是bam文件，bam文件需要按照reads名称排序，操作方法为：  $ samtools sort -n accepted_filerted.bam acceted_sortname 1.2 GenomicAlignments GenomicAlignments是R/Bioconductor的一个包，其中summarizeOverlaps函数用于对alignment数据进行计数。
1.3 Kallisto 简介：kallisto是由Lior Pachter小组开发一款快速测量RNA-seq数据中转录本表达丰度的软件。因为使用了*pseudoalignment*的想法，可以不用alignment，直接测量原始测序数据，因此极大提高了运算速度。因为kallisto极高的速度，可以使用bootstrap精确估计的“不确定性（uncertainty）”，可以配合下游软件sleuth确定差异表达基因。</description>
    </item>
    
    <item>
      <title>UCSC Table下载注释文件</title>
      <link>https://YulongNiu.github.io/posts/2015-06-02-download-ucsc-gene-mask/</link>
      <pubDate>Tue, 02 Jun 2015 16:49:41 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-06-02-download-ucsc-gene-mask/</guid>
      <description>在进行RNA-seq数据分析时，需要从UCSC Table下载各种注释信息。比如Cufflinks等要求的转录组注释信息、Cufflinks建议去除的rRNA/tRNA/线粒体组注释。
1. 基因注释信息 下载转录组Ensembl注释文件：
在“table”选择中，ensemblSource表示Ensembl类型注释，ensemblToGeneName表示Ensembl到基因名注释对应。
2. rRNA注释信息 分为两步：
第一步， “table”选择wgEncodeGencodeBasicV19。
第二步，按照下图编辑“filter”。
3. tRNA注释信息 分为两步：
第一步，“track”选择 tRNA Genes。
第二步，保留pseudo tRNA注释。
4. 线粒体基因组注释 分为两步：
第一步， “table”选择wgEncodeGencodeBasicV19。
第二步，按照下图编辑“filter”。
参考资料  USCS Genome Browser的Google论坛：1、2
 另一种选择rRNA、tRNA和线粒体组注释的方法How to get tRNA/rRNA/mitochondrial gene GTF file
 Extract rRNA and tRNA features from UCSC Browser
  更新记录 2015年6月1日</description>
    </item>
    
    <item>
      <title>SSH建立端口转发</title>
      <link>https://YulongNiu.github.io/posts/2015-05-31-ssh-tunnel/</link>
      <pubDate>Sun, 31 May 2015 21:14:02 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-05-31-ssh-tunnel/</guid>
      <description>SSH建立端口转发分为两步：
1. 连接远程主机 $ ssh -NT -D 8080 usrname@host 其中，-N表示只连接远程主机，不打开远程shell；-T表示不分配TTY；-D表示某端口数据都通过SSH传向远程主机；8080可以设置为其他端口。
2. 添加Chrome浏览器支持 添加Proxy SwitchySharp插件，之后在SOCKS host栏目中填入地址127.0.0.1，端口8080并启用即可。
参考网址  SSH隧道翻墙的原理和实现
 SSH原理与运用（二）：远程操作与端口转发
  更新记录 2017年5月31日</description>
    </item>
    
    <item>
      <title>确定TopHat中mate-inner-dist参数</title>
      <link>https://YulongNiu.github.io/posts/2015-05-23-tophat-inner-distance/</link>
      <pubDate>Sat, 23 May 2015 19:08:19 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-05-23-tophat-inner-distance/</guid>
      <description>对于双端测序RNA-seq数据，TopHat在运行时候，有两个参数-r/--mate-inner-dist和--mate-std-dev分别标识一对reads的间隔长度的期望平均值和标准差，其默认值分别为50bp和20bp。这两个参数本身是个估计值，用于TopHat在map过程中确定一对reads是否匹配到基因组正确位置。如果能够准确设定这两个数值，将会提升TopHat结果的准确性和完整性，参考一个例子。
有两种方法获得这对参数的准确值：
第一种：获取RNA-seq实验建库方法，之后按照以下网址说明计算，RNA-seq差异表达分析工作流程。
第二种：根据RNA-seq数据进行估算，具体步骤为：
 使用TopHat默认参数先跑一遍。
 使用MISO的pe_utils工具估算。
  以下详细介绍pe_utils使用方法。
第一步， 下载对应物种的基因注释文件GTF或者GFF，比如USCS Table Browser（output format选择GTF）或者使用MISO提供的Ensembl版本。如果GTF文件，使用Cufflinks的gffread工具进行转换。
第二步，确定TopHat运行结果的bam文件与基因注释GFF文件，两者基因组命名方法一致。有的使用类似chr1命名，而另外一些使用1。如果不一致，建议修改GFF文件。
# 查看GFF文件中基因组命名 $ awk &amp;#39;{print $1}&amp;#39; hg19USCS.gff | sort -n | uniq -c # 查看bam文件中基因组命名 samtools view accepted_hits.bam | head -1000 | awk &amp;#39;{print $3}&amp;#39; | sort -n | uniq -c 第三步，筛选较长外显子，比如长度大于1000bp。MISO提供了exon_utils工具用于提取长外显子，但是我们没有能够成功运行过。因此这里提供一个R版本的脚本，比如基因注释文件名为hg19USCS.gff，输出筛选的文件名为hg19USCS_selected.gff。
gffFile &amp;lt;- read.table(&amp;#39;hg19USCS.gff&amp;#39;, stringsAsFactors = FALSE) gffExon &amp;lt;- gffFile[gffFile[, 3] == &amp;#39;exon&amp;#39;, ] exonLen &amp;lt;- abs(gffExon[, 5] - gffExon[, 4]) gffExonSelect &amp;lt;- gffExon[exonLen &amp;gt;= 1000, ] write.</description>
    </item>
    
    <item>
      <title>过滤TopHat分析双端测序的输出</title>
      <link>https://YulongNiu.github.io/posts/2015-05-16-filter-tophat2-output/</link>
      <pubDate>Sat, 16 May 2015 04:33:10 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2015-05-16-filter-tophat2-output/</guid>
      <description>0. 结论 在使用TopHat2匹配双端测序结果后，建议根据成对reads的map基因组位置唯一、方向正确和距离合适的标准，筛选得到的匹配结果。比如，TopHat2可能生成accepted_hits.bam文件，处理方法如下：
# 首先查看bam文件头部有多少行 $ samtools view -H accepted_hits.bam | wc -l 86 # 筛选成对且成功map到基因组唯一位置的reads，按照上一条输出结果，调整“NR &amp;lt;= 86” $ samtools view -h accepted_hits.bam | \  awk &amp;#39;{if (NR &amp;lt;= 86) print $0}; {if($5 == 50 &amp;amp;&amp;amp; ($2 == 163 || $2 == 147 || $2 == 83 || $2 == 99)) print $0}&amp;#39; | \  samtools view -b - &amp;gt; accepted_filtered.bam $ samtools view accepted_filtered.bam | wc -l 79143942 1.</description>
    </item>
    
    <item>
      <title>清洗二代测序数据</title>
      <link>https://YulongNiu.github.io/posts/2014-07-28-clean-seq-data/</link>
      <pubDate>Mon, 28 Jul 2014 20:11:18 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2014-07-28-clean-seq-data/</guid>
      <description>1. FastQC 简介：FastQC是用于对二代测序数据质量快速检验的工具，可以输入fastq（fastq.gz）、sam或者bam文件。查看输出结果解释。
平台：所有平台。
安装： 依赖Java，下载后直接安装使用。
快速运行：
# 输出分析结果至特定文档 $ fastqc seqFile1 --outdir setFolder1 # 支持批量处理测序数据 $ fastqc seqFile1 seqFile2 seqFileN # 查看帮助信息 $ fastqc --help # 查看一共分析了多少个reads，比如fastqc文件为“accepted_filtered_fastqc.zip” $ unzip -p accepted_filtered_fastqc.zip accepted_filtered_fastqc/fastqc_data.txt | \  sed -n &amp;#39;7 p&amp;#39; | \  awk &amp;#39;{print $3}&amp;#39; 2. Trim Galore! 简介：Trim Galore!是对FastQC和Cutadapt的包装。可以处理Illumina、Nextera 3和smallRNA测序平台的双端和单端数据，包括去除adapter和低质量reads。
平台：Linux
安装:
 需要先分别安装FastQC和Cutadapt，其中Cutadapt安装使用  # pip install cutadapt 快速运行：
# 处理双端测序结果 $ trim_galore --quality 20 --phred33 --stringency 3 --length 20 --paired \  --gzip --output_dir human_trimgalore \  mySeq_1_1.</description>
    </item>
    
    <item>
      <title>二代测序中的短序列比对</title>
      <link>https://YulongNiu.github.io/posts/2014-07-25-short-sequence-alignment/</link>
      <pubDate>Fri, 25 Jul 2014 14:04:25 -0400</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2014-07-25-short-sequence-alignment/</guid>
      <description> 在二代测序数据分析中，非常重要的一步是将测得的短序列“对应”到基因组上。所使用的工具被称为“短序列比对工具（short sequence aligners）”。以下是一些常用工具的介绍。
1. Bowtie 简介：Bowtie2是现在广泛使用的序列比对工具。
运行方式：所有平台
特点：
 相比较Bowtie1，处理大于50bp的短序列，速度更快、也更敏感。Bowtie1在处理小于50bp的短序列上，效果更好。
 iGenomes提供一些事先编排（index）的基因组。
  快速运行：
# 建立一系列FASTA文件目录 $ bowtie2-build /filePath/genomeFastaFile indexName # 从已经index文件中提取原始基因组 $ bowtie2-inspect indexName &amp;gt; genomeFastaFile # unpaired序列比对 $ bowtie2 -p 4 -x indexName -U readFiles -S samFileName # paired序列比对 $ bowtie2 -p 4 -x indexName -1 readFiles1 -2 readFiles2 -S eg2.sam  -p：多线程
 -x：之后跟index名称
 -U：测序文件（比如Fasta，Fastq文件）
 -1/-2：标识paired文件
 -S：SAM格式输出文件
  参考网址  Heng Li总结的工具列表  </description>
    </item>
    
    <item>
      <title>RNA-Seq基本概念和数据分析流程</title>
      <link>https://YulongNiu.github.io/posts/2014-07-22-rna-seq-analysis/</link>
      <pubDate>Tue, 22 Jul 2014 17:03:15 -0400</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2014-07-22-rna-seq-analysis/</guid>
      <description>RNA-Seq相比较基因芯片，价格虽然昂贵一些，精度和灵敏度更高。同时，在测序深度足够时，也可以检测mRNA选择性剪切类型。
1. 样品制备 2. 测序 Illumina双端测序动画和图示。
3. 分析流程 RNA-Seq主要分析流程：
原始数据质量评估 --&amp;gt; 数据清洗（去除接头和低质量read） --&amp;gt; 清洗数据质量评估 --&amp;gt; map测序结果至基因组（转录组） --&amp;gt; map数据质量评估 --&amp;gt; 差异表达基因/选择性剪切/新基因/融合基因选择 --&amp;gt; GO和pathway分析 --&amp;gt; 共表达网络分析 3.1 序列清洗 序列清洗主要是去除测序结果中的adapter或通用引物等。
以下使用Illumina HiSeq2000平台，对一个人类样本的RNA测序。统计各种序列清洗方法和选择后的reads数目。原始数据两端测序reads分别为54,492,228和54,492,228。
  Method #Trimmed #Mapped* #Filtered     r50-notrim 108,984,456 109,278,388 79,143,942   r50-nomixed-notrim 108,984,456 103,548,800 79,143,942   r50-nomixed-trimmomatic-min20 104,164,622 116,315,394 80,337,256   r50-nomixed-trimmomatic-min36 101,548,172 110,778,108 79,248,896   r50-nomixed-trimmomatic-min50 98,525,312 106,659,988 77,779,424   r50-nomixed-galore-min20 107,097,862 114,943,386 83,039,928   r100-nomixed-galore-min20 107,097,862 114,944,672 87,899,316   r165sd45-nomixed-galore-min20 107,097,862 114,201,366 90,750,208   r165sd45G-nomixed-galore-min20 107,097,862 109,901,742 93,477,122   r165sd45-nomixed-galore-min50 104,869,208 109,258,544 89,329,672    *：使用TopHat2把序列mapped到hs19基因组。TopHat2默认设置为，如果一个reads能mapped到多个位点，则都会报道。因此数目可能比原始数据多。 4.</description>
    </item>
    
    <item>
      <title>TopHat/Cufflinks/CummeRbund使用介绍</title>
      <link>https://YulongNiu.github.io/posts/2014-07-26-tophat-cufflinks-cummerbund/</link>
      <pubDate>Thu, 26 Jun 2014 14:51:56 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2014-07-26-tophat-cufflinks-cummerbund/</guid>
      <description>TopHat、Cufflinks和cummeRbund，被称为处理RNA-seq数据的“燕尾服（tuxedo）”。TopHat负责RNA-seq的reads映射比对到基因组，并且自动识别mRNA“内含子-外显子”剪切；Cufflinks擅长组装转录组和寻找差异表达基因（或转录起始位点TSS等）；cummeRbund主攻数据可视化。
1. Tophat 简介：TopHat是快速将RNA测序片段“对应（mapping）”到基因组上的工具，优势在于处理外显子间的剪切。内部首先使用bowtie或bowtie2把RNA测序片段“比对（alignment）”到基因组，之后再分析和鉴定剪切连接区域。
平台：Mac OS/Linux
快速运行：
# 双端测序 $ tophat2 -p 8 -o human_1 \  --mate-inner-dist 165 --mate-std-dev 45 --no-mixed \  hg19 human_1.fastq.gz human_2.fastq.gz # 单端测序 $ tophat2 -p 8 -o human_1 hg19 human_1.fastq.gz 重要参数解释：
 -p：设置线程数，用于多核计算。
 -o：执行输入文件夹。
 -r/--mate-inner-dist：一对reads的间隔长度的期望平均值，默认值为50bp，建议添加。具体解释，参考RNA-seq差异表达分析工作流程和Tophat中-r/–mate-inner-dist参数。
 --mate-std-dev：一对reads的间隔长度分布的标准差，默认值为20bp，建议添加。-r/--mate-inner-dist和--mate-std-dev的估计方法参考确定TopHat中mate-inner-dist参数。
 --library-type：
 测序仪器和方法，默认为标准Illumina平台的fr-unstranded。其他平台设置，详见TopHat说明文档、How to tell which library type to use (fr-firststrand or fr-secondstrand)?和链特异性转录组原理。
 如果分不清楚fr-firststrand和fr-secondstrand，推荐两种方法：第一种用两个参数试运行一个有1M reads的小样本，之后比较junction.bed大小；第二种在两个双端测序文件（fastq.gz）中抽取一些reads，之后Blat到USCS genomes上观察。
  --no-discordant：只对于paired reads，只报告concordant mappings。加入这个参数，tophat2在最后一步失败。也可以不加入这个参数，通过sam/bam文件第二列过滤discordant reads，方法参考过滤TopHat分析双端测序的输出。</description>
    </item>
    
    <item>
      <title>Circos Notes</title>
      <link>https://YulongNiu.github.io/posts/2014-03-17-circos-notes/</link>
      <pubDate>Mon, 17 Mar 2014 15:37:45 -0400</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2014-03-17-circos-notes/</guid>
      <description>Mapping data onto a Circos figure requires that you identify what patterns in your data are (a) likely to be important and (b) likely to be present, and create a figure that exposes such patterns. Remember, if the pattern exists, you can&amp;rsquo;t afford to miss it. If it doesn&amp;rsquo;t exist, you can&amp;rsquo;t afford to be fooled into thinking that it&amp;rsquo;s there, or left wondering whether it&amp;rsquo;s occluded by other data.</description>
    </item>
    
    <item>
      <title>A brief intruction of mutual information and demonstration with R</title>
      <link>https://YulongNiu.github.io/posts/2013-11-10-mutual-information/</link>
      <pubDate>Sun, 10 Nov 2013 01:21:16 -0500</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2013-11-10-mutual-information/</guid>
      <description>$\newcommand{\entropfrac}[2]{\frac{#1}{#2} \log \left( \frac{#1}{#2} \right)}$
Mututal Information (MI) Introduction Mutual Information (MI) is used to measure the distance between two genes vectors, for example $x_1 = {{1, 0, 1, 1, 1, 1, 0}}$ and $y_1 = {{0, 1, 1, 1, 1, 1, 0}}$. It is easily to transfer the two vectors into a binary table:
  X/Y 1 (Presence) 0 (Absence) Sum     1(Presence) a b a+b   0(Absence) c d c+d   Sum a+c b+d n=a+b+c+d    Typically, here we give the example of two discrete variables, the mutual information between $x_1$ and $y_1$ is</description>
    </item>
    
    <item>
      <title>探索EM算法</title>
      <link>https://YulongNiu.github.io/posts/2013-07-13-em/</link>
      <pubDate>Sat, 13 Jul 2013 19:23:22 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2013-07-13-em/</guid>
      <description>$$ \newcommand{\P}{\mathrm{P}} $$
$$ \DeclareMathOperator*{\argmax}{arg\,max} $$
EM算法的推出 考虑观测数据$Y=\{y_1, y_2, \dots, y_m\}$，其中不可观测数据为$Z=\{z_1, z_2, \dots, z_k\}$，需要估计的参数为$\theta=\{\theta_1, \theta_2, \dots, \theta_t\}$。$Z$可以是离散或连续型随机变量，以下过程中假设$Z$为离散型（$Z$为连续型，则全概率公式由求和改为积分）。则观测数据的对数似然函数为：
$$ \begin{align} \begin{split} L(\theta) &amp;amp;= \log\left(\prod_{j=1}^m \P(y_j|\theta)\right) \newline &amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \P(y_j, z|\theta)\right) \end{split} \label{eq:1} \end{align} $$
为了使$L(\theta)$最大，很容易想到对$\theta$偏导求极值。但有一个困难，即$Z$不可观测，导致的直接后果是对数套求和，计算难度增加。直觉是，否能找到一个方法，将求和放在对数外面？一个常用的技巧是转化为不等式，Jensen&amp;rsquo;s inequality描述了积分的函数与函数的积分的关系。由于$\log(x)$是凹函数，尝试考察某一次特定的$\theta^{(n)}$取值后，$L(\theta)$与$L(\theta^{(n)})$的差：
$$ \begin{align} \begin{split} L(\theta) - L(\theta^{(n)}) &amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \P(y_j, z|\theta)\right) - L(\theta^{(n)}) \newline &amp;amp;= \sum_{j=1}^m \log\left( \sum_{z \in Z} \P(z|y_j, \theta^{(n)}) \frac{\P(y_j, z|\theta)}{\P(z|y_j, \theta^{(n)})}\right) - L(\theta^{(n)}) \newline &amp;amp;\geq \sum_{j=1}^m \sum_{z \in Z} \P(z|y_j, \theta^{(n)}) \log \left( \frac{\P(y_j, z|\theta)}{\P(z|y_j, \theta^{(n)})} \right) \newline &amp;amp;- \sum_{j=1}^m \sum_{z \in Z} \P(z|y_j, \theta^{(n)}) \log(\P(y_j|\theta^{n})) \newline &amp;amp;= \sum_{j=1}^m \sum_{z \in Z} \P(z|y_j, \theta^{(n)}) \log\left(\frac{\P(y_j, z|\theta)}{\P(y_j, z|\theta^{(n)})} \right) \end{split} \label{eq:2} \end{align} $$</description>
    </item>
    
    <item>
      <title>生物信息学工具网址</title>
      <link>https://YulongNiu.github.io/posts/2013-06-18-bioinfor-tools/</link>
      <pubDate>Tue, 18 Jun 2013 16:42:10 -0400</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2013-06-18-bioinfor-tools/</guid>
      <description>1. 基因组注释信息  NCBI ftp 下载基因组
 Craig Venter Institute
 Ensembl
  2. 进化树  进化树展示
 Wiki software list
 Biostats总结
 iTOL
 Dendroscope
  进化树构建
 RAxML
 PhyML
 PHYLIP，在PHYLIP的介绍中，列出了六个高使用率的构建进化树的软件，MrBayes、PAUP*、RAxML、PhyML、MEGA和PHYLIP。
  已知进化树
 Open Tree of Life  时间尺度进化树
 TimeTree   sRNA数据库
 16S/23S数据库
 细菌16S数据库
 真核生物rRNA
  数据格式转换
 fasta转换为Phylip
 进化树newick和nexus格式转换
 R package ape，提供了函数read.tree()/write.tree()，read.nexus()/read.nexus()。  通用格式转换工具</description>
    </item>
    
    <item>
      <title>统计学基本知识汇总</title>
      <link>https://YulongNiu.github.io/posts/2013-05-10-primary-statistic/</link>
      <pubDate>Fri, 10 May 2013 00:29:47 +0800</pubDate>
      
      <guid>https://YulongNiu.github.io/posts/2013-05-10-primary-statistic/</guid>
      <description>$$ \newcommand{\P}{\mathrm{P}} $$
1. 完备事件 对于完备事件组$X = \{x_1, x_2, \dots, x_n\}$：
$$ \begin{align} \begin{split} \P(x_1) + \P(x_2) + \dots + \P(x_n) = 1 \end{split} \label{eq:1} \end{align} $$
常用的技巧构造乘法系数，例如$\P(Y) = \sum\limits_{i=1}^{n}\P(x_i|\theta)\P(Y)$
2. 全概率公式 对于完备事件组$X = \{x_1, x_2, \dots, x_n\}$，事件$Y$的全概率公式：
$$ \begin{align} \begin{split} \P(Y) &amp;amp;= \P(Y, x_1) + \P(Y, x_2) + \dots + \P(Y, x_n) \newline &amp;amp;= \P(x_1)\P(Y|x_1) + \P(x_2)\P(Y|x_2) + \dots + \P(x_n)\P(Y|x_n) \end{split} \label{eq:2} \end{align} $$
使用概率密度函数表示为：
$$ \begin{align} \begin{split} f(Y) &amp;amp;= \int_{-\infty}^{+\infty}f(Y, x) \mathrm{d}x \newline &amp;amp;= \int_{-\infty}^{+\infty}f(Y|x)f(x) \mathrm{d}x \end{split} \label{eq:3} \end{align} $$</description>
    </item>
    
  </channel>
</rss>