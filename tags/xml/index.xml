<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XML on Yulong Niu</title><link>https://YulongNiu.github.io/tags/xml/</link><description>Recent content in XML on Yulong Niu</description><generator>Hugo</generator><language>en-us</language><copyright>© Copyright notice</copyright><lastBuildDate>Sun, 25 Oct 2015 19:05:33 +0800</lastBuildDate><atom:link href="https://YulongNiu.github.io/tags/xml/index.xml" rel="self" type="application/rss+xml"/><item><title>XML中XPath规则总结</title><link>https://YulongNiu.github.io/posts/2015-10-25-xpath-xml/</link><pubDate>Sun, 25 Oct 2015 19:05:33 +0800</pubDate><guid>https://YulongNiu.github.io/posts/2015-10-25-xpath-xml/</guid><description>&lt;p>&lt;a href="http://www.w3.org/TR/xpath-30/">XPath&lt;/a>提供了一种对XML节点、节点属性和内容快速查询的规则。在各种编程语言中都有实现，比如C语言的&lt;a href="http://www.xmlsoft.org/">libxml2&lt;/a>和对应的R包 &lt;a href="https://cran.r-project.org/web/packages/xml2/index.html">xml2&lt;/a>。&lt;/p>
&lt;h2 id="1-查询规则">1. 查询规则&lt;/h2>
&lt;p>XPath查询集中在三个对象：节点、节点属性和节点内容。&lt;/p>
&lt;h3 id="11-选择节点">1.1 选择节点&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB&lt;/code>：nodeA为根节点，nodeA下的所有nodeB节点；等价于&lt;code>nodeB&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeB&lt;/code>：所有nodeB节点，在R包xml2中（比如函数&lt;code>xml_find_all()&lt;/code>），&lt;code>//nodeB&lt;/code>搜索范围是整个文档，忽略当前节点；而&lt;code>.//nodeB&lt;/code>搜索范围是当前节点之下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeB[1]&lt;/code>：所有nodeB节点的第一个；&lt;code>//nodeB[last()-1]&lt;/code>：所有nodeB节点的倒数第二个；&lt;code>nodeA/nodeB[position()&amp;lt;3]&lt;/code>:当前nodeA节点，其下所有nodeB子节点的前两个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/nodeA/*&lt;/code>：nodeA为根节点，nodeA下的所有节点；&lt;code>/*/*/nodeC&lt;/code>：所有拥有两个父节点的nodeC节点；&lt;code>//*&lt;/code>：所有节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//*[count(nodeD)=3]&lt;/code>：含有3个nodeD子节点的节点；&lt;code>//*[count(*)=2]&lt;/code>：含有任意2个子节点的节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//*[name()='nodeB']&lt;/code>：所有名称为“nodeB”的节点，等价于&lt;code>//nodeB&lt;/code>；&lt;code>//*[starts-with(name(),'N')]&lt;/code>：所有名称以“N”开头的节点；&lt;code>//*[contains(name(),'N')]&lt;/code>：所有名称中含有“N”的节点；&lt;code>//*[string-length(name()) = 3]&lt;/code>：所有名称的字符串长度等于3的节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeA | //nodeB&lt;/code>：所有nodeA，以及nodeB的节点，多个搜索条件合并，搜索添加没有限制。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-选择节点属性">1.2 选择节点属性&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>//@attr1&lt;/code>：所有拥有attr1的&lt;strong>属性&lt;/strong>，注意：返回的不是节点，而是类此&lt;code>attr1=text1&lt;/code>的属性；&lt;code>//node1/@attr1&lt;/code>：所有node1带有的attr1属性；&lt;code>//nodeB[@attr1]&lt;/code>：所有拥有“attr1”属性的nodeB节点；&lt;code>//nodeB[@attr1='test1']&lt;/code>：所有拥有“attr1”属性为“test1”的nodeB节点；&lt;code>//nodeB[normalize-space(@attr1)='test1']&lt;/code>：所有拥有attr1属性为“test1”（属性去除字符串前后空格，内部连续空格替换为一个空格）的nodeB节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//node1[@*]&lt;/code>：所有node1带有任意属性的节点；&lt;code>//node1[not(@*)]&lt;/code>：所有node1不带属性的节点；&lt;code>//node1[contains(@attr1, 'N')]&lt;/code>：带有“attr1”属性的node1节点，“attr1”属性中含有“N”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//node1[TEST1][TEST2]&lt;/code>：多个属性形选择可以首位相接，依次判断是否为真。TEST1和TEST2同时为真，返回选择结果。&lt;code>//nodeA[nodeB/@attr1='test1']&lt;/code>：选择所有nodeA节点，这些nodeA节点拥有nodeB子节点且属性“attr1”为“test1”。&lt;code>//nodeC[@attr1='test1'][../nodeB/@attr2='test2']&lt;/code>：选择所有拥有“attr1”为“test1”的nodeC节点，而且这些nodeC节点有属性“attr2”为“test2”的nodeB父亲节点。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="13-选择节点内容">1.3 选择节点内容&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB[nodeC&amp;gt;5]&lt;/code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>/nodeA/nodeB[nodeC&amp;gt;5]/nodeD&lt;/code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC[.=5]&lt;/code>：所有nodeC节点，其内容等于5。使用&lt;code>.&lt;/code>代替自身。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/node()&lt;/code>：选择所有nodeC节点下的所有点，包括节点下内容和子节点（距离最近，不包括子节点的子节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/text()&lt;/code>：选择所有nodeC节点下的内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="14-函数使用">1.4 函数使用&lt;/h3>
&lt;ul>
&lt;li>&lt;code>//nodeC[contains(text(), 'test1')]&lt;/code>：选择所有nodeC节点，而且nodeC节点下内容包括“test1”。&lt;/li>
&lt;/ul>
&lt;h2 id="2-轴">2. 轴&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>child::&lt;/code>：默认轴，可以省略。比如&lt;code>/child::nodeA&lt;/code>等价于&lt;code>/AAA&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>descendant::&lt;/code>：选择上下文节点的所有子节点、子节点的子节点、子节点的子节点的子节点（依次类推，直至最后一个子节点）。&lt;code>//nodeA/descendant::*&lt;/code>：所有nodeA节点的所有子节点、子节点的子节点等等；&lt;code>//nodeA/descendant::nodeC&lt;/code>：所有nodeA节点的所有的nodeC子节点，nodeC可能是nodeA的某个子节点的子节点，区别与&lt;code>//nodeA/nodeD&lt;/code>；&lt;code>/descendant::*&lt;/code>：文档所有子节点、子节点的子节点等等，等价于&lt;code>//*&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>descendant-or-self::*&lt;/code>：选择上下文节点自身及其所有子节点、子节点的子节点（依次类推，直至最后一个子节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>parent::&lt;/code>：选择上下文节点的父节点（最靠近的父节点）。&lt;code>//nodeC/parent::*&lt;/code>：所有nodeC节点的所有父节点；&lt;code>//nodeC/parent::nodeA[@attr1='test1']&lt;/code>：nodeC节点的nodeA父节点，这些nodeA父节点的“attr1”属性等于“test1”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ancestor::&lt;/code>：选择上下文节点的父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。&lt;code>//nodeC/ancestor::nodeA&lt;/code>：所有nodeC的父节点和父节点的父节点等等中的nodeA节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ancestor-or-self::&lt;/code>：：选择上下文节点自身及其所有父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>following-sibling::&lt;/code>：选择与上下文节点等级相同（即深度相同）的且位置靠后（上为前，下为后）的兄弟节点。&lt;code>//nodeC/following-sibling::*&lt;/code>：所有nodeC节点等级相同的且位置靠后的兄弟节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>preceding-sibling::&lt;/code>：同&lt;code>following-sibling::&lt;/code>，也是兄弟节点但位置靠前。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>following::&lt;/code>：选择上下文节点之后的所有节点（包括对应的子节点），但除了根节点。&lt;code>//nodeC/following::*&lt;/code>：所有nodeC节点之后的所有节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>preceding::&lt;/code>：选择上下文节点之前的所有节点（包括对应的子节点），但除了根节点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>//nodeC/ancestor::* | //nodeC/descendant::* | //nodeC/following::* | //nodeC/preceding::* | //nodeC/self::*&lt;/code>：所有节点，等价于&lt;code>//*&lt;/code>或者等价于&lt;code>/descendant::*&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考网址">参考网址&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/XPath">维基百科对XPath介绍&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.zvon.org/xxl/XPathTutorial/General_chi/examples.html">zvon中XPath的有趣例子&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.w3school.com.cn/xpath/index.asp">w3school的XPath中文教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://xccds1977.blogspot.sg/2013/02/xmlxpath.html">博文《XML和XPath使用方法备忘》&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="更新记录">更新记录&lt;/h3>
&lt;p>2018年12月25日&lt;/p></description></item></channel></rss>